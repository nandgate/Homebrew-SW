 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 1 - 2/27/2023 4:25:40


       1/       0 :                         CPU     6800
       2/       0 :                         include "vec.asm"
(1)    1/       0 :                         CPU     6800
(1)    2/       0 :                     
(1)    3/       0 :                     ; Vector table
(1)    4/    FFF8 :                         ORG     $FFF8
(1)    5/    FFF8 : F2 B5                   ADR     irq
(1)    6/    FFFA : F2 B7                   ADR     swi
(1)    7/    FFFC : F2 B9                   ADR     nmi
(1)    8/    FFFE : F1 56                   ADR     reset
(1)    9/   10000 :                     
       3/   10000 :                     
       4/    F000 :                         ORG     $F000
       5/    F000 :                         include "LED.asm"
(1)    1/    F000 :                         CPU     6800
(1)    2/    F000 :                         
(1)    3/    F000 :                     ; PIA already defined in uart.asm
(1)    4/    F000 :                     
(1)    5/    F000 : =$4                  LED_RED     EQU     $04
(1)    6/    F000 : =$8                  LED_GREEN   EQU     $08
(1)    7/    F000 : =$2                  LED_BLUE    EQU     $02
(1)    8/    F000 :                     
(1)    9/    F000 :                     ledon   macro   name,bitName,{GLOBALSYMBOLS}
(1)   10/    F000 :                     LED_name_On:
(1)   11/    F000 :                         psha
(1)   12/    F000 :                         ldaa    PIA_PORTB
(1)   13/    F000 :                         oraa    #bitName
(1)   14/    F000 :                         staa    PIA_PORTB
(1)   15/    F000 :                         pula
(1)   16/    F000 :                         rts
(1)   17/    F000 :                         endm
(1)   18/    F000 :                         
(1)   19/    F000 :                     ledoff   macro   name,bitName,{GLOBALSYMBOLS}
(1)   20/    F000 :                     LED_name_Off:
(1)   21/    F000 :                         psha
(1)   22/    F000 :                         ldaa    PIA_PORTB
(1)   23/    F000 :                         anda    #(~bitName) & 255
(1)   24/    F000 :                         staa     PIA_PORTB
(1)   25/    F000 :                         pula
(1)   26/    F000 :                         rts
(1)   27/    F000 :                         endm
(1)   28/    F000 :                     
(1)   29/    F000 :                     ledtoggle   macro   name,bitName,{GLOBALSYMBOLS}
(1)   30/    F000 :                     LED_name_Toggle:
(1)   31/    F000 :                         psha
(1)   32/    F000 :                         ldaa    PIA_PORTB
(1)   33/    F000 :                         eora    #bitName
(1)   34/    F000 :                         staa    PIA_PORTB
(1)   35/    F000 :                         pula
(1)   36/    F000 :                         rts
(1)   37/    F000 :                         endm
(1)   38/    F000 :                     
(1)   39/    F000 :                     LED_init:
(1)   40/    F000 : B6 02 00                ldaa    PIA_PORTB
(1)   41/    F003 : 84 F1                   anda    #(~(LED_RED | LED_GREEN | LED_BLUE)) & 255
(1)   42/    F005 : B7 02 00                staa    PIA_PORTB
(1)   43/    F008 : B6 02 02                ldaa    PIA_DDRB
(1)   44/    F00B : 8A 0E                   oraa    #(LED_RED | LED_GREEN | LED_BLUE) & 255
(1)   45/    F00D : B7 02 02                staa    PIA_DDRB
(1)   46/    F010 : 39                      rts
 AS V1.42 Beta [Bld 223] - Source File monitor.asm(LED.asm) - Page 2 - 2/27/2023 4:25:40


(1)   47/    F011 :                     
(1)   48/    F011 : (MACRO)                  ledon       Red,LED_RED
(1)   48/    F011 :                     LED_RED_On:
(1)   48/    F011 : 36                      psha
(1)   48/    F012 : B6 02 00                ldaa    PIA_PORTB
(1)   48/    F015 : 8A 04                   oraa    #LED_RED
(1)   48/    F017 : B7 02 00                staa    PIA_PORTB
(1)   48/    F01A : 32                      pula
(1)   48/    F01B : 39                      rts
(1)   49/    F01C : (MACRO)                  ledoff      Red,LED_RED
(1)   49/    F01C :                     LED_RED_Off:
(1)   49/    F01C : 36                      psha
(1)   49/    F01D : B6 02 00                ldaa    PIA_PORTB
(1)   49/    F020 : 84 FB                   anda    #(~LED_RED) & 255
(1)   49/    F022 : B7 02 00                staa     PIA_PORTB
(1)   49/    F025 : 32                      pula
(1)   49/    F026 : 39                      rts
(1)   50/    F027 : (MACRO)                  ledtoggle   Red,LED_RED
(1)   50/    F027 :                     LED_RED_Toggle:
(1)   50/    F027 : 36                      psha
(1)   50/    F028 : B6 02 00                ldaa    PIA_PORTB
(1)   50/    F02B : 88 04                   eora    #LED_RED
(1)   50/    F02D : B7 02 00                staa    PIA_PORTB
(1)   50/    F030 : 32                      pula
(1)   50/    F031 : 39                      rts
(1)   51/    F032 :                         
(1)   52/    F032 : (MACRO)                  ledon       Green,LED_GREEN
(1)   52/    F032 :                     LED_GREEN_On:
(1)   52/    F032 : 36                      psha
(1)   52/    F033 : B6 02 00                ldaa    PIA_PORTB
(1)   52/    F036 : 8A 08                   oraa    #LED_GREEN
(1)   52/    F038 : B7 02 00                staa    PIA_PORTB
(1)   52/    F03B : 32                      pula
(1)   52/    F03C : 39                      rts
(1)   53/    F03D : (MACRO)                  ledoff      Green,LED_GREEN
(1)   53/    F03D :                     LED_GREEN_Off:
(1)   53/    F03D : 36                      psha
(1)   53/    F03E : B6 02 00                ldaa    PIA_PORTB
(1)   53/    F041 : 84 F7                   anda    #(~LED_GREEN) & 255
(1)   53/    F043 : B7 02 00                staa     PIA_PORTB
(1)   53/    F046 : 32                      pula
(1)   53/    F047 : 39                      rts
(1)   54/    F048 : (MACRO)                  ledtoggle   Green,LED_GREEN
(1)   54/    F048 :                     LED_GREEN_Toggle:
(1)   54/    F048 : 36                      psha
(1)   54/    F049 : B6 02 00                ldaa    PIA_PORTB
(1)   54/    F04C : 88 08                   eora    #LED_GREEN
(1)   54/    F04E : B7 02 00                staa    PIA_PORTB
(1)   54/    F051 : 32                      pula
(1)   54/    F052 : 39                      rts
(1)   55/    F053 :                     
(1)   56/    F053 : (MACRO)                  ledon       Blue,LED_BLUE
(1)   56/    F053 :                     LED_BLUE_On:
(1)   56/    F053 : 36                      psha
(1)   56/    F054 : B6 02 00                ldaa    PIA_PORTB
(1)   56/    F057 : 8A 02                   oraa    #LED_BLUE
(1)   56/    F059 : B7 02 00                staa    PIA_PORTB
(1)   56/    F05C : 32                      pula
(1)   56/    F05D : 39                      rts
(1)   57/    F05E : (MACRO)                  ledoff      Blue,LED_BLUE
 AS V1.42 Beta [Bld 223] - Source File monitor.asm(LED.asm) - Page 3 - 2/27/2023 4:25:40


(1)   57/    F05E :                     LED_BLUE_Off:
(1)   57/    F05E : 36                      psha
(1)   57/    F05F : B6 02 00                ldaa    PIA_PORTB
(1)   57/    F062 : 84 FD                   anda    #(~LED_BLUE) & 255
(1)   57/    F064 : B7 02 00                staa     PIA_PORTB
(1)   57/    F067 : 32                      pula
(1)   57/    F068 : 39                      rts
(1)   58/    F069 : (MACRO)                  ledtoggle   Blue,LED_BLUE  
(1)   58/    F069 :                     LED_BLUE_Toggle:
(1)   58/    F069 : 36                      psha
(1)   58/    F06A : B6 02 00                ldaa    PIA_PORTB
(1)   58/    F06D : 88 02                   eora    #LED_BLUE
(1)   58/    F06F : B7 02 00                staa    PIA_PORTB
(1)   58/    F072 : 32                      pula
(1)   58/    F073 : 39                      rts
       6/    F074 :                         include "uart.asm"
(1)    1/    F074 : =>UNDEFINED              IFNDEF  _UART_
(1)    2/    F074 : =$1                  _UART_   SET     1
(1)    3/    F074 :                         CPU     6800
(1)    4/    F074 :                     
(1)    5/    F074 : =$200                PIA_BASE    EQU     $0200
(1)    6/    F074 : =$200                PIA_PORTB   EQU     PIA_BASE + $0
(1)    7/    F074 : =$201                PIA_PORTA   EQU     PIA_BASE + $1
(1)    8/    F074 : =$202                PIA_DDRB    EQU     PIA_BASE + $2
(1)    9/    F074 : =$203                PIA_DDRA    EQU     PIA_BASE + $3
(1)   10/    F074 : =$20B                PIA_ACR     EQU     PIA_BASE + $B
(1)   11/    F074 : =$20C                PIA_PCR     EQU     PIA_BASE + $C
(1)   12/    F074 :                         
(1)   13/    F074 : =$0                  PIA_IN      EQU     $00
(1)   14/    F074 : =$FF                 PIA_OUT     EQU     $FF
(1)   15/    F074 :                     
(1)   16/    F074 : =$1                  FT240_WRMSK EQU     $01     ; WR on bit-0
(1)   17/    F074 : =$20                 FT240_SIWU  EQU     $20     ; SIWU on bit 5, always high
(1)   18/    F074 : =$E                  FT240_NOSTB EQU     $0E     ; RD# = 1, irqs disabled 
(1)   19/    F074 : =$C                  FT240_RDSTB EQU     $0C     ; RD# = 0, irqs disabled 
(1)   20/    F074 : =$40                 FT240_TXE   EQU     $40     ; TXE# on bit 6 (FIFO can accept data when low)
(1)   21/    F074 : =$80                 FT240_RXF   EQU     $80     ; RXF# on bit 7 (FIFO has data when low)
(1)   22/    F074 :                     
(1)   23/    F074 :                     
(1)   24/    F074 :                     ; Initialize the VIA to operate iwth the FT240, which is use for console IO.
(1)   25/    F074 :                     FT240_init:
(1)   26/    F074 : 86 0E                   ldaa    #FT240_NOSTB    ; RD# = 1
(1)   27/    F076 : B7 02 0C                staa    PIA_PCR
(1)   28/    F079 : B6 02 00                ldaa    PIA_PORTB       ; WR = 0, don't touch the other bits
(1)   29/    F07C : 84 FE                   anda    #~FT240_WRMSK
(1)   30/    F07E : B7 02 00                staa    PIA_PORTB
(1)   31/    F081 : 86 00                   ldaa    #PIA_IN         ; data port input, its only output when writing to FT240
(1)   32/    F083 : B7 02 03                staa    PIA_DDRA
(1)   33/    F086 : B6 02 02                ldaa    PIA_DDRB        ; control ports bits for FT240, don't touch other bits
(1)   34/    F089 : 8A 21                   oraa    #(FT240_WRMSK | FT240_SIWU) & $FF   ; Ouptut pins
(1)   35/    F08B : 84 3F                   anda    #(~(FT240_RXF | FT240_TXE)) & $FF   ; Input pins
(1)   36/    F08D : B7 02 02                staa    PIA_DDRB
(1)   37/    F090 :                     
(1)   38/    F090 :                     FT240_Flush:
(1)   39/    F090 : B6 02 00                ldaa    PIA_PORTB       ; Test RXF# (bit-7)
(1)   40/    F093 : 2B 0D                   bmi     $$NoChar        ; Branch when RXF# is set, no data in FIFO
(1)   41/    F095 : C6 0C                   ldab    #FT240_RDSTB    ; FT240 RD# = 0; strobe next byte from FIFO
(1)   42/    F097 : F7 02 0C                stab    PIA_PCR
(1)   43/    F09A : 01                      nop
(1)   44/    F09B : C6 0E                   ldab    #FT240_NOSTB    ; FT240 RD# = 1
 AS V1.42 Beta [Bld 223] - Source File monitor.asm(uart.asm) - Page 4 - 2/27/2023 4:25:40


(1)   45/    F09D : F7 02 0C                stab    PIA_PCR
(1)   46/    F0A0 : 20 EE                   bra     FT240_Flush
(1)   47/    F0A2 :                     $$NoChar:
(1)   48/    F0A2 : 39                      rts
(1)   49/    F0A3 :                     
(1)   50/    F0A3 :                     ; Output the value in the accA to the console    
(1)   51/    F0A3 :                     PutChar:
(1)   52/    F0A3 : 36                      psha
(1)   53/    F0A4 :                     $$PutWait:
(1)   54/    F0A4 : B6 02 00                ldaa    PIA_PORTB       ; Test TXE (bit-6)
(1)   55/    F0A7 : 85 40                   bita    #FT240_TXE
(1)   56/    F0A9 : 26 F9                   bne     $$PutWait       ; When set the FIFO is full, keep polling until there is room
(1)   57/    F0AB : 32                      pula
(1)   58/    F0AC : B7 02 01                staa    PIA_PORTA       ; Write data to port
(1)   59/    F0AF : 86 FF                   ldaa    #PIA_OUT        ; Set data port direction to output
(1)   60/    F0B1 : B7 02 03                staa    PIA_DDRA
(1)   61/    F0B4 : B6 02 00                ldaa    PIA_PORTB       ; FT240 WR = 1 (don't touch other bits)
(1)   62/    F0B7 : 8A 01                   oraa    #FT240_WRMSK
(1)   63/    F0B9 : B7 02 00                staa    PIA_PORTB
(1)   64/    F0BC : 84 FE                   anda    #~FT240_WRMSK   ; FT240 WR = 0
(1)   65/    F0BE : B7 02 00                staa    PIA_PORTB
(1)   66/    F0C1 : 86 00                   ldaa    #PIA_IN         ; Set data port direction to input
(1)   67/    F0C3 : B7 02 03                staa    PIA_DDRA
(1)   68/    F0C6 : 39                      rts
(1)   69/    F0C7 :                     
(1)   70/    F0C7 :                        ; print null terminated string at (x)
(1)   71/    F0C7 :                     putStr:
(1)   72/    F0C7 : A6 00                   ldaa    0,x         ; get the character
(1)   73/    F0C9 : 27 06                   beq     $$exit      ; is it $00? yes, done
(1)   74/    F0CB : BD F0 A3                jsr     PutChar     ; no, send it
(1)   75/    F0CE : 08                      inx                 ; increment pointer
(1)   76/    F0CF : 20 F6                   bra     putStr      ; output next character
(1)   77/    F0D1 :                     $$exit:
(1)   78/    F0D1 : 39                      rts
(1)   79/    F0D2 :                         
(1)   80/    F0D2 :                     ; Read a character from the console in the accA, C == 1 indicates a character was read
(1)   81/    F0D2 :                     GetCharNB:
(1)   82/    F0D2 : B6 02 00                ldaa    PIA_PORTB       ; Test RXF# (bit-7)
(1)   83/    F0D5 : 2B 0F                   bmi     $$NoChar        ; Branch when RXF# is set, no data in FIFO
(1)   84/    F0D7 : C6 0C                   ldab    #FT240_RDSTB    ; FT240 RD# = 0; strobe next byte from FIFO
(1)   85/    F0D9 : F7 02 0C                stab    PIA_PCR
(1)   86/    F0DC : B6 02 01                ldaa    PIA_PORTA       ; Read data byte from FT240 (assumes DDR in input)
(1)   87/    F0DF : C6 0E                   ldab    #FT240_NOSTB    ; FT240 RD# = 1
(1)   88/    F0E1 : F7 02 0C                stab    PIA_PCR
(1)   89/    F0E4 : 0D                      sec                     ; Set carry to indicate we read a data byte
(1)   90/    F0E5 : 39                      rts
(1)   91/    F0E6 :                     $$NoChar:
(1)   92/    F0E6 : 0C                      clc                     ; Clear carry to indicate there was nothing to read
(1)   93/    F0E7 : 39                      rts
(1)   94/    F0E8 :                     
(1)   95/    F0E8 :                     ; Blocking read a character from the console
(1)   96/    F0E8 :                     GetChar:
(1)   97/    F0E8 : 8D E8                   bsr     GetCharNB       ; Is a charcter available
(1)   98/    F0EA : 24 FC                   bcc     GetChar         ; Got a char? Keep polling until we get a char
(1)   99/    F0EC : 39                      rts
(1)  100/    F0ED :                     
(1)  101/    F0ED : [1]                      ENDIF
       7/    F0ED :                         include "hexio.asm"
(1)    1/    F0ED : =>UNDEFINED              IFNDEF  _HEXIO_
(1)    2/    F0ED : =$1                  _HEXIO_     SET     1
 AS V1.42 Beta [Bld 223] - Source File monitor.asm(hexio.asm) - Page 5 - 2/27/2023 4:25:40


(1)    3/    F0ED :                     
(1)    4/    F0ED :                         include "uart.asm"
(2)    1/    F0ED : =>DEFINED                IFNDEF  _UART_
(2)    2/    F0ED :                     _UART_   SET     1
(2)    3/    F0ED :                         CPU     6800
(2)    4/    F0ED :                     
(2)    5/    F0ED :                     PIA_BASE    EQU     $0200
(2)    6/    F0ED :                     PIA_PORTB   EQU     PIA_BASE + $0
(2)    7/    F0ED :                     PIA_PORTA   EQU     PIA_BASE + $1
(2)    8/    F0ED :                     PIA_DDRB    EQU     PIA_BASE + $2
(2)    9/    F0ED :                     PIA_DDRA    EQU     PIA_BASE + $3
(2)   10/    F0ED :                     PIA_ACR     EQU     PIA_BASE + $B
(2)   11/    F0ED :                     PIA_PCR     EQU     PIA_BASE + $C
(2)   12/    F0ED :                         
(2)   13/    F0ED :                     PIA_IN      EQU     $00
(2)   14/    F0ED :                     PIA_OUT     EQU     $FF
(2)   15/    F0ED :                     
(2)   16/    F0ED :                     FT240_WRMSK EQU     $01     ; WR on bit-0
(2)   17/    F0ED :                     FT240_SIWU  EQU     $20     ; SIWU on bit 5, always high
(2)   18/    F0ED :                     FT240_NOSTB EQU     $0E     ; RD# = 1, irqs disabled 
(2)   19/    F0ED :                     FT240_RDSTB EQU     $0C     ; RD# = 0, irqs disabled 
(2)   20/    F0ED :                     FT240_TXE   EQU     $40     ; TXE# on bit 6 (FIFO can accept data when low)
(2)   21/    F0ED :                     FT240_RXF   EQU     $80     ; RXF# on bit 7 (FIFO has data when low)
(2)   22/    F0ED :                     
(2)   23/    F0ED :                     
(2)   24/    F0ED :                     ; Initialize the VIA to operate iwth the FT240, which is use for console IO.
(2)   25/    F0ED :                     FT240_init:
(2)   26/    F0ED :                         ldaa    #FT240_NOSTB    ; RD# = 1
(2)   27/    F0ED :                         staa    PIA_PCR
(2)   28/    F0ED :                         ldaa    PIA_PORTB       ; WR = 0, don't touch the other bits
(2)   29/    F0ED :                         anda    #~FT240_WRMSK
(2)   30/    F0ED :                         staa    PIA_PORTB
(2)   31/    F0ED :                         ldaa    #PIA_IN         ; data port input, its only output when writing to FT240
(2)   32/    F0ED :                         staa    PIA_DDRA
(2)   33/    F0ED :                         ldaa    PIA_DDRB        ; control ports bits for FT240, don't touch other bits
(2)   34/    F0ED :                         oraa    #(FT240_WRMSK | FT240_SIWU) & $FF   ; Ouptut pins
(2)   35/    F0ED :                         anda    #(~(FT240_RXF | FT240_TXE)) & $FF   ; Input pins
(2)   36/    F0ED :                         staa    PIA_DDRB
(2)   37/    F0ED :                     
(2)   38/    F0ED :                     FT240_Flush:
(2)   39/    F0ED :                         ldaa    PIA_PORTB       ; Test RXF# (bit-7)
(2)   40/    F0ED :                         bmi     $$NoChar        ; Branch when RXF# is set, no data in FIFO
(2)   41/    F0ED :                         ldab    #FT240_RDSTB    ; FT240 RD# = 0; strobe next byte from FIFO
(2)   42/    F0ED :                         stab    PIA_PCR
(2)   43/    F0ED :                         nop
(2)   44/    F0ED :                         ldab    #FT240_NOSTB    ; FT240 RD# = 1
(2)   45/    F0ED :                         stab    PIA_PCR
(2)   46/    F0ED :                         bra     FT240_Flush
(2)   47/    F0ED :                     $$NoChar:
(2)   48/    F0ED :                         rts
(2)   49/    F0ED :                     
(2)   50/    F0ED :                     ; Output the value in the accA to the console    
(2)   51/    F0ED :                     PutChar:
(2)   52/    F0ED :                         psha
(2)   53/    F0ED :                     $$PutWait:
(2)   54/    F0ED :                         ldaa    PIA_PORTB       ; Test TXE (bit-6)
(2)   55/    F0ED :                         bita    #FT240_TXE
(2)   56/    F0ED :                         bne     $$PutWait       ; When set the FIFO is full, keep polling until there is room
(2)   57/    F0ED :                         pula
(2)   58/    F0ED :                         staa    PIA_PORTA       ; Write data to port
 AS V1.42 Beta [Bld 223] - Source File monitor.asm(uart.asm) - Page 6 - 2/27/2023 4:25:40


(2)   59/    F0ED :                         ldaa    #PIA_OUT        ; Set data port direction to output
(2)   60/    F0ED :                         staa    PIA_DDRA
(2)   61/    F0ED :                         ldaa    PIA_PORTB       ; FT240 WR = 1 (don't touch other bits)
(2)   62/    F0ED :                         oraa    #FT240_WRMSK
(2)   63/    F0ED :                         staa    PIA_PORTB
(2)   64/    F0ED :                         anda    #~FT240_WRMSK   ; FT240 WR = 0
(2)   65/    F0ED :                         staa    PIA_PORTB
(2)   66/    F0ED :                         ldaa    #PIA_IN         ; Set data port direction to input
(2)   67/    F0ED :                         staa    PIA_DDRA
(2)   68/    F0ED :                         rts
(2)   69/    F0ED :                     
(2)   70/    F0ED :                        ; print null terminated string at (x)
(2)   71/    F0ED :                     putStr:
(2)   72/    F0ED :                         ldaa    0,x         ; get the character
(2)   73/    F0ED :                         beq     $$exit      ; is it $00? yes, done
(2)   74/    F0ED :                         jsr     PutChar     ; no, send it
(2)   75/    F0ED :                         inx                 ; increment pointer
(2)   76/    F0ED :                         bra     putStr      ; output next character
(2)   77/    F0ED :                     $$exit:
(2)   78/    F0ED :                         rts
(2)   79/    F0ED :                         
(2)   80/    F0ED :                     ; Read a character from the console in the accA, C == 1 indicates a character was read
(2)   81/    F0ED :                     GetCharNB:
(2)   82/    F0ED :                         ldaa    PIA_PORTB       ; Test RXF# (bit-7)
(2)   83/    F0ED :                         bmi     $$NoChar        ; Branch when RXF# is set, no data in FIFO
(2)   84/    F0ED :                         ldab    #FT240_RDSTB    ; FT240 RD# = 0; strobe next byte from FIFO
(2)   85/    F0ED :                         stab    PIA_PCR
(2)   86/    F0ED :                         ldaa    PIA_PORTA       ; Read data byte from FT240 (assumes DDR in input)
(2)   87/    F0ED :                         ldab    #FT240_NOSTB    ; FT240 RD# = 1
(2)   88/    F0ED :                         stab    PIA_PCR
(2)   89/    F0ED :                         sec                     ; Set carry to indicate we read a data byte
(2)   90/    F0ED :                         rts
(2)   91/    F0ED :                     $$NoChar:
(2)   92/    F0ED :                         clc                     ; Clear carry to indicate there was nothing to read
(2)   93/    F0ED :                         rts
(2)   94/    F0ED :                     
(2)   95/    F0ED :                     ; Blocking read a character from the console
(2)   96/    F0ED :                     GetChar:
(2)   97/    F0ED :                         bsr     GetCharNB       ; Is a charcter available
(2)   98/    F0ED :                         bcc     GetChar         ; Got a char? Keep polling until we get a char
(2)   99/    F0ED :                         rts
(2)  100/    F0ED :                     
(2)  101/    F0ED : [1]                      ENDIF
(1)    5/    F0ED :                     
(1)    6/    F0ED :                     getHexByte:
(1)    7/    F0ED : BD F1 00                jsr     getHexDigit         ; get the first hex digit
(1)    8/    F0F0 : 25 0D                   bcs     $$getHexByteExit    ; bail on error
(1)    9/    F0F2 : 48                      asl     a                   ; move digit to high nibble
(1)   10/    F0F3 : 48                      asl     a
(1)   11/    F0F4 : 48                      asl     a
(1)   12/    F0F5 : 48                      asl     a
(1)   13/    F0F6 : 36                      psh     a                   ; save it later
(1)   14/    F0F7 : BD F1 00                jsr     getHexDigit         ; Get second hex digit
(1)   15/    F0FA : 25 03                   bcs     $$getHexByteExit    ; bail on error
(1)   16/    F0FC : 33                      pul     b                   ; get high nibble
(1)   17/    F0FD : 1B                      aba                         ; combine with low nibble to form the byte value
(1)   18/    F0FE : 0C                      clc                         ; clear carry for success
(1)   19/    F0FF :                     $$getHexByteExit
(1)   20/    F0FF : 39                      rts
(1)   21/    F100 :                     
 AS V1.42 Beta [Bld 223] - Source File monitor.asm(hexio.asm) - Page 7 - 2/27/2023 4:25:40


(1)   22/    F100 :                     getHexDigit
(1)   23/    F100 : BD F0 E8                jsr     GetChar
(1)   24/    F103 :                     parseHexDigit:
(1)   25/    F103 :                         ; Process hex digit in accA [0..9][A..F][a..f]
(1)   26/    F103 : 8A 20                   oraa    #$20            ; Force to lower
(1)   27/    F105 : C6 0F                   ldab    #$0F
(1)   28/    F107 : CE F1 55                ldx     #(HexChars+15); initialize point to valid hex chars
(1)   29/    F10A :                     $$ParseLoop:
(1)   30/    F10A : A1 00                   cmpa    0,x             ; Is it this digit?
(1)   31/    F10C : 27 06                   beq     $$GotHex        ; Yes, process the nibble value
(1)   32/    F10E : 09                      dex                     ; No, advance pointer
(1)   33/    F10F : 5A                      decb
(1)   34/    F110 : 2A F8                   bpl     $$ParseLoop     ; Keep checking until index underflows
(1)   35/    F112 : 0D                      sec                     ; Index underflowed, not a hex digit, indicate failue
(1)   36/    F113 : 39                      rts
(1)   37/    F114 :                     $$GotHex:
(1)   38/    F114 : 17                      tba                     ; Put the parsed value in accA
(1)   39/    F115 : 0C                      clc                     ; Clear carry to indicate success
(1)   40/    F116 : 39                      rts
(1)   41/    F117 :                         
(1)   42/    F117 :                         ; Output the value in accA to the console as two hex bytes
(1)   43/    F117 :                     putHex8:
(1)   44/    F117 : 16                      tab                         ; save value
(1)   45/    F118 : 44                      lsra                        ; move high nibble to low
(1)   46/    F119 : 44                      lsra
(1)   47/    F11A : 44                      lsra
(1)   48/    F11B : 44                      lsra
(1)   49/    F11C : CE F1 46                ldx     #HexChars           ; lookup hex char for nibble
(1)   50/    F11F : DF 04                   stx     ptrH
(1)   51/    F121 : 9B 05                   adda    ptrL                ; add in offset (assumes indexing within same page)
(1)   52/    F123 : 97 05                   staa    ptrL
(1)   53/    F125 : DE 04                   ldx     ptrH
(1)   54/    F127 : A6 00                   ldaa    0,x
(1)   55/    F129 : BD F0 A3                jsr     PutChar             ; output hex char for nibble
(1)   56/    F12C : C4 0F                   andb    #$0f                ; mask high nibble away
(1)   57/    F12E : CE F1 46                ldx     #HexChars           ; lookup hex char for nibble
(1)   58/    F131 : DF 04                   stx     ptrH
(1)   59/    F133 : DB 05                   addb    ptrL
(1)   60/    F135 : D7 05                   stab    ptrL
(1)   61/    F137 : DE 04                   ldx     ptrH
(1)   62/    F139 : A6 00                   ldaa    0,x
(1)   63/    F13B : 7E F0 A3                jmp     PutChar             ; output hex char for nibble
(1)   64/    F13E :                     
(1)   65/    F13E :                     ; print accB,accA as a hex value
(1)   66/    F13E :                     putHex16:
(1)   67/    F13E : 36                      psh     a                   ; save low value for later
(1)   68/    F13F : 17                      tba
(1)   69/    F140 : BD F1 17                jsr     putHex8             ; print the high byte
(1)   70/    F143 : 32                      pul     a                   ; get the low value back
(1)   71/    F144 : 20 D1                   bra     putHex8             ; print the low byte
(1)   72/    F146 :                     
(1)   73/    F146 :                     HexChars:
(1)   74/    F146 : 30 31 32 33 34 35       FCB     "0123456789abcdef"
             F14C : 36 37 38 39 61 62 
             F152 : 63 64 65 66       
(1)   75/    F156 :                     
(1)   76/    F156 : [1]                      ENDIF
       8/    F156 :                     
       9/    F156 :                     ; Simple monitor:
      10/    F156 :                     ; Prompt messsage is:
 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 8 - 2/27/2023 4:25:40


      11/    F156 :                     ; 
      12/    F156 :                     ; aaaa bb>
      13/    F156 :                     ; 
      14/    F156 :                     ; Where aaaa is the current addess and bb is the current value at that address.
      15/    F156 :                     ;
      16/    F156 :                     ; Commands:
      17/    F156 :                     ; ?     Show the info message
      18/    F156 :                     ; =     Re-read the current address
      19/    F156 :                     ; <lf>  Write to current address and increment address
      20/    F156 :                     ; +     Increment current address
      21/    F156 :                     ; -     Decrement current address
      22/    F156 :                     ; g     Go to current address
      23/    F156 :                     ; <sp>  Set urrent address   
      24/    F156 :                     
      25/    F156 :                     ; Zero page address
      26/    F156 : =$0                  addrH       EQU     $00
      27/    F156 : =$1                  addrL       EQU     $01
      28/    F156 : =$2                  userH       EQU     $02
      29/    F156 : =$3                  userL       EQU     $03
      30/    F156 : =$4                  ptrH        EQU     $04
      31/    F156 : =$5                  ptrL        EQU     $05
      32/    F156 : =$6                  styp        EQU     $06
      33/    F156 : =$7                  scnt        EQU     $07   
      34/    F156 : =$8                  schk        EQU     $08   
      35/    F156 :                     
      36/    F156 :                     reset:
      37/    F156 : 8E 01 FF                lds     #$01FF
      38/    F159 : BD F0 74                jsr     FT240_init
      39/    F15C : BD F0 00                jsr     LED_init
      40/    F15F :                     
      41/    F15F :                     InitMon:
      42/    F15F : 86 00                   ldaa    #$00            ; Clear monitor state
      43/    F161 : 97 01                   staa    addrL           
      44/    F163 : 97 00                   staa    addrH
      45/    F165 : 97 03                   staa    userL
      46/    F167 : 97 02                   staa    userH
      47/    F169 :                         
      48/    F169 :                     InfoCmd:
      49/    F169 : CE F2 A0                ldx     #InfoStr
      50/    F16C : BD F0 C7                jsr     putStr
      51/    F16F :                     
      52/    F16F :                     Prompt:
      53/    F16F :                     ;    jsr     LED_RED_Off
      54/    F16F : 86 0A                   ldaa    #$0a            ; Show Prompt
      55/    F171 : BD F0 A3                jsr     PutChar
      56/    F174 : D6 00                   ldab    addrH           ; Show address
      57/    F176 : 96 01                   ldaa    addrL
      58/    F178 : BD F1 3E                jsr     putHex16
      59/    F17B : 86 20                   ldaa    #' '            ; Space to seperate address and data
      60/    F17D : BD F0 A3                jsr     PutChar
      61/    F180 : DE 00                   ldx     addrH           ; Show data at address
      62/    F182 : A6 00                   ldaa    0,x             
      63/    F184 : BD F1 17                jsr     putHex8
      64/    F187 : 86 3E                   ldaa    #'>'            ; Show Prompt
      65/    F189 : BD F0 A3                jsr     PutChar
      66/    F18C :                      NextChar:   
      67/    F18C : BD F0 E8                jsr     GetChar         ; get char from user
      68/    F18F :                     ;    jsr     LED_RED_On
      69/    F18F : 16                      tab
      70/    F190 :                     ;    jsr     PutChar         ; Should we echo the character?????
 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 9 - 2/27/2023 4:25:40


      71/    F190 : 17                      tba
      72/    F191 : 81 3F                   cmpa    #'?'            ; Show info?
      73/    F193 : 27 D4                   beq     InfoCmd
      74/    F195 : 81 53                   cmpa    #'S'             ; S-record?
      75/    F197 : 27 61                   beq     LoadSrec
      76/    F199 : 81 3D                   cmpa    #'='            ; re-read address?
      77/    F19B : 27 D2                   beq     Prompt
      78/    F19D : 81 0A                   cmpa    #$0a            ; Write data byte?
      79/    F19F : 26 08                   bne     NotWrite
      80/    F1A1 : 96 03                   ldaa    userL           ; Get the last 8-bit value entered
      81/    F1A3 : DE 00                   ldx     addrH
      82/    F1A5 : A7 00                   staa    0,x             ; Store at the current address
      83/    F1A7 : 20 04                   bra     DoInc           ; Increment the current address
      84/    F1A9 :                     
      85/    F1A9 :                     NotWrite:
      86/    F1A9 : 81 2B                   cmpa    #'+'            ; Incement address?
      87/    F1AB : 26 07                   bne     NotInc
      88/    F1AD :                     DoInc:
      89/    F1AD : DE 00                   ldx     addrH
      90/    F1AF : 08                      inx          
      91/    F1B0 : DF 00                   stx     addrH
      92/    F1B2 : 20 BB                   bra     Prompt
      93/    F1B4 :                     
      94/    F1B4 :                     NotInc:
      95/    F1B4 : 81 2D                   cmpa    #'-'            ; Decrement address?
      96/    F1B6 : 26 07                   bne     NotDec
      97/    F1B8 : DE 00                   ldx     addrH
      98/    F1BA : 09                      dex
      99/    F1BB : DF 00                   stx     addrH
     100/    F1BD : 20 B0                   bra     Prompt
     101/    F1BF :                     
     102/    F1BF :                     NotDec:
     103/    F1BF : 81 67                   cmpa    #'g'            ; go to address?
     104/    F1C1 : 26 0A                   bne     NotGo
     105/    F1C3 : 86 56                   lda     #(reset)&$FF    ; push the return address onto the stack
     106/    F1C5 : 36                      psha
     107/    F1C6 : 86 F1                   lda     #(reset)>>8
     108/    F1C8 : 36                      psha
     109/    F1C9 : DE 00                   ldx     addrH
     110/    F1CB : 6E 00                   jmp     0,x
     111/    F1CD :                     
     112/    F1CD :                     NotGo:
     113/    F1CD : 81 20                   cmpa    #' '            ; set current address?
     114/    F1CF : 26 0C                   bne     NotAddr
     115/    F1D1 : DE 02                   ldx     userH           ; move the user value to the current address
     116/    F1D3 : DF 00                   stx     addrH
     117/    F1D5 : 86 00                   ldaa    #$00            ; clear user value
     118/    F1D7 : 97 03                   staa    userL
     119/    F1D9 : 97 02                   staa    userH
     120/    F1DB : 20 92                   bra     Prompt          ; Continue with the new address 
     121/    F1DD :                     
     122/    F1DD :                     NotAddr:
     123/    F1DD :                     ParseHex:
     124/    F1DD : BD F1 03                jsr     parseHexDigit   ; Get a hex digit
     125/    F1E0 : 25 8D                   bcs     Prompt          ; Bail when not a hex digit
     126/    F1E2 : 36                      psha                    ; save value for later
     127/    F1E3 : 96 03                   ldaa    userL           ; Shift the user value to the left by 4 bits
     128/    F1E5 : D6 02                   ldab    userH
     129/    F1E7 : 48                      asla
     130/    F1E8 : 59                      rolb
 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 10 - 2/27/2023 4:25:40


     131/    F1E9 : 48                      asla
     132/    F1EA : 59                      rolb
     133/    F1EB : 48                      asla
     134/    F1EC : 59                      rolb
     135/    F1ED : 48                      asla
     136/    F1EE : 59                      rolb
     137/    F1EF : 97 03                   staa    userL
     138/    F1F1 : D7 02                   stab    userH
     139/    F1F3 : 32                      pula                    ; get the value back
     140/    F1F4 : 9A 03                   oraa    userL           ; Insert the nibble into the user value
     141/    F1F6 : 97 03                   staa    userL
     142/    F1F8 : 20 92                   bra     NextChar        ; Done, get next char    
     143/    F1FA :                         
     144/    F1FA :                     ; Read and process an S-record
     145/    F1FA :                     LoadSrec:
     146/    F1FA : BD F0 E8                jsr     GetChar             ; Get the S-record type
     147/    F1FD : 97 06                   staa    styp                ; Save it for later
     148/    F1FF : 81 30                   cmpa    #'0'                ; S0 record?
     149/    F201 : 27 12                   beq     S0Rec               ; yes, processes it
     150/    F203 : 81 31                   cmpa    #'1'                ; S1 record?
     151/    F205 : 27 11                   beq     SRec                ; yes, process it
     152/    F207 : 81 39                   cmpa    #'9'                ; S9 record?
     153/    F209 : 27 0D                   beq     SRec                ; yes, process it
     154/    F20B :                     ReadToEOL:                      ; Not a support S-reord type
     155/    F20B : BD F0 E8                jsr     GetChar             ; get next char
     156/    F20E : 81 0A                   cmpa    #'\n'               ; End Of Line?
     157/    F210 : 26 F9                   bne     ReadToEOL           ; No, keep reading
     158/    F212 : 7E F1 6F                jmp     Prompt              ; Yes, done with record
     159/    F215 :                     S0Rec:
     160/    F215 : BD F0 1C                jsr     LED_RED_OFF         ; Turn off the error status LED
     161/    F218 :                     SRec:
     162/    F218 : 7F 00 08                clr     schk                ; New record, clear the checksum
     163/    F21B : BD F2 8B                jsr     getHexByteSrec      ; Get byte count
     164/    F21E : 25 54                   bcs     SErr                ; skip rest of line when not hex
     165/    F220 : 97 07                   staa    scnt
     166/    F222 : BD F2 8B                jsr     getHexByteSrec      ; Get address high
     167/    F225 : 25 4D                   bcs     SErr                ; skip rest of line when not hex
     168/    F227 : 97 00                   staa    addrH
     169/    F229 : BD F2 8B                jsr     getHexByteSrec      ; Get address low
     170/    F22C : 25 46                   bcs     SErr                ; skip rest of line when not hex
     171/    F22E : 97 01                   staa    addrL
     172/    F230 : 96 06                   ldaa    styp                ; Is this a S0 record?
     173/    F232 : 81 30                   cmpa    #'0'                  
     174/    F234 : 26 12                   bne     SLoop               ; Nope skip S0Tag    
     175/    F236 : CE F2 9B                ldx     #S0Tag              ; Show we got a S0 record 
     176/    F239 : BD F0 C7                jsr     putStr
     177/    F23C : 96 01                   ldaa    addrL               ; Show the address field
     178/    F23E : D6 00                   ldab    addrH
     179/    F240 : BD F1 3E                jsr     putHex16
     180/    F243 : 86 3A                   ldaa    #':'                ; Seperator
     181/    F245 : BD F0 A3                jsr     putChar
     182/    F248 :                     SLoop:
     183/    F248 : 96 07                   ldaa    scnt                ; Is checksum next byte?
     184/    F24A : 4A                      dec     a
     185/    F24B : 27 1D                   beq     SVerify             ; Yes, verify checksum
     186/    F24D : BD F2 8B                jsr     getHexByteSrec      ; No, read the next byte as two hex digits
     187/    F250 : 25 22                   bcs     SErr                ; skip rest of line when not hex
     188/    F252 : D6 06                   ldab    styp                ; Is this a S0 record?    
     189/    F254 : C1 30                   cmpb    #'0'
     190/    F256 : 26 05                   bne     S1Rec
 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 11 - 2/27/2023 4:25:40


     191/    F258 : BD F0 A3                jsr     putChar             ; yes, echo back to the user as a char
     192/    F25B : 20 EB                   bra     SLoop
     193/    F25D :                     S1Rec:
     194/    F25D : C1 31                   cmpb    #'1'                ; is this an S1 record?
     195/    F25F : 26 E7                   bne     SLoop               ; no, must be S9, ignore the data
     196/    F261 : DE 00                   ldx     addrH               ; yes, save the data byte to the current address
     197/    F263 : A7 00                   sta     0,x
     198/    F265 : 08                      inx                         ; Increment the address
     199/    F266 : DF 00                   stx     addrH
     200/    F268 : 20 DE                   bra     SLoop
     201/    F26A :                     SVerify:
     202/    F26A : BD F2 8B                jsr     getHexByteSrec      ; read the checksum
     203/    F26D : 25 05                   bcs     SErr                ; skip rest of line when not hex
     204/    F26F : 96 08                   lda     SCHK                ; Checksum is now valid when it is zero
     205/    F271 : 4C                      inc     a
     206/    F272 : 27 05                   beq     SChkOK              ; Checks out..
     207/    F274 :                     SErr:
     208/    F274 : BD F0 11                jsr     LED_RED_ON          ; Checksum failed, turn on the red light
     209/    F277 : 20 92                   bra     ReadToEOL           ; Skip the rest of the line until EOL
     210/    F279 :                     SChkOk:
     211/    F279 : D6 06                   ldab    styp                ; S9 record?
     212/    F27B : C1 39                   cmpb    #'9'
     213/    F27D : 26 8C                   bne     ReadToEOL           ; no, done with this record, skip the rest of the line
     214/    F27F : DE 00                   ldx     addrH               ; yes, get the address
     215/    F281 : 8C 00 00                cmpx    #0                  ; is the address zero?
     216/    F284 : 27 85                   beq     ReadToEOL           ; yes, done with record
     217/    F286 : AD 00                   jsr     0,x                 ; no, transer to specified address 
     218/    F288 : 7E F1 5F                jmp     InitMon
     219/    F28B :                         
     220/    F28B :                     getHexByteSrec:
     221/    F28B : BD F0 ED                jsr     getHexByte          ; get a byte as two hex digits
     222/    F28E : 25 0A                   bcs     $$Exit              ; bail on error
     223/    F290 : 36                      psha    
     224/    F291 : 9B 08                   adda    schk                ; add byte value to running checksum
     225/    F293 : 97 08                   staa    schk
     226/    F295 : 7A 00 07                dec     scnt                ; Decrement the byte count
     227/    F298 : 32                      pula                        ; return the byte value
     228/    F299 : 0C                      clc                         ; clear carry for success
     229/    F29A :                     $$Exit:
     230/    F29A : 39                      rts
     231/    F29B :                         
     232/    F29B :                     S0Tag:
     233/    F29B : 0A 53 30 20 00          db      10,"S0 ",0
     234/    F2A0 :                         
     235/    F2A0 :                     InfoStr:
     236/    F2A0 : 0A 4D 69 6E 69 4D       FCB     10,"MiniMon,0.1,6802,0",10,0
             F2A6 : 6F 6E 2C 30 2E 31 
             F2AC : 2C 36 38 30 32 2C 
             F2B2 : 30 0A 00          
     237/    F2B5 :                        
     238/    F2B5 :                     irq:
     239/    F2B5 : 20 FE                   bra     irq
     240/    F2B7 :                     
     241/    F2B7 :                     swi: 
     242/    F2B7 : 20 FE                   bra     swi
     243/    F2B9 :                         
     244/    F2B9 :                     nmi:
     245/    F2B9 : 20 FE                   bra     nmi
     246/    F2BB :                     
     247/    F2BB :                     ;  S00400004100
 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 12 - 2/27/2023 4:25:40


 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 13 - 2/27/2023 4:25:40


  Symbol Table (* = unused):
  --------------------------

 ADDRH :                          0 - |  ADDRL :                          1 - |
*ARCHITECTURE :                                        "i386-unknown-win32" - |
*CASESENSITIVE :                  0 - | *COMPMODE :                       0 - |
*CONSTPI :        3.141592653589793 - | *DATE :                 "2/27/2023" - |
 DOINC :                       F1AD C |  EXIT45 :                      F0D1 C |
 EXIT85 :                      F29A C | *FALSE :                          0 - |
 FT240_FLUSH :                 F090 C |  FT240_INIT :                  F074 C |
 FT240_NOSTB :                    E - |  FT240_RDSTB :                    C - |
 FT240_RXF :                     80 - |  FT240_SIWU :                    20 - |
 FT240_TXE :                     40 - |  FT240_WRMSK :                    1 - |
*FULLPMMU :                       1 - |  GETCHAR :                     F0E8 C |
 GETCHARNB :                   F0D2 C |  GETHEXBYTE :                  F0ED C |
 GETHEXBYTEEXIT49 :            F0FF C |  GETHEXBYTESREC :              F28B C |
 GETHEXDIGIT :                 F100 C |  GOTHEX51 :                    F114 C |
*HAS64 :                          0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - |  HEXCHARS :                    F146 C |
 INFOCMD :                     F169 C |  INFOSTR :                     F2A0 C |
 INITMON :                     F15F C | *INSUPMODE :                      0 - |
 IRQ :                         F2B5 C |  LED_BLUE :                       2 - |
*LED_BLUE_OFF :                F05E C | *LED_BLUE_ON :                 F053 C |
*LED_BLUE_TOGGLE :             F069 C |  LED_GREEN :                      8 - |
*LED_GREEN_OFF :               F03D C | *LED_GREEN_ON :                F032 C |
*LED_GREEN_TOGGLE :            F048 C |  LED_INIT :                    F000 C |
 LED_RED :                        4 - |  LED_RED_OFF :                 F01C C |
 LED_RED_ON :                  F011 C | *LED_RED_TOGGLE :              F027 C |
*LISTON :                         1 - |  LOADSREC :                    F1FA C |
*MACEXP :                         7 - | *MOMCPU :                      6800 - |
*MOMCPUNAME :                "6800" - | *NESTMAX :                      100 - |
 NEXTCHAR :                    F18C C |  NMI :                         F2B9 C |
 NOCHAR43 :                    F0A2 C |  NOCHAR46 :                    F0E6 C |
 NOTADDR :                     F1DD C |  NOTDEC :                      F1BF C |
 NOTGO :                       F1CD C |  NOTINC :                      F1B4 C |
 NOTWRITE :                    F1A9 C | *PADDING :                        0 - |
*PARSEHEX :                    F1DD C |  PARSEHEXDIGIT :               F103 C |
 PARSELOOP51 :                 F10A C | *PIA_ACR :                      20B - |
 PIA_BASE :                     200 - |  PIA_DDRA :                     203 - |
 PIA_DDRB :                     202 - |  PIA_IN :                         0 - |
 PIA_OUT :                       FF - |  PIA_PCR :                      20C - |
 PIA_PORTA :                    201 - |  PIA_PORTB :                    200 - |
 PROMPT :                      F16F C |  PTRH :                           4 - |
 PTRL :                           5 - |  PUTCHAR :                     F0A3 C |
 PUTHEX16 :                    F13E C |  PUTHEX8 :                     F117 C |
 PUTSTR :                      F0C7 C |  PUTWAIT44 :                   F0A4 C |
 READTOEOL :                   F20B C | *RELAXED :                        1 - |
 RESET :                       F156 C |  S0REC :                       F215 C |
 S0TAG :                       F29B C |  S1REC :                       F25D C |
 SCHK :                           8 - |  SCHKOK :                      F279 C |
 SCNT :                           7 - |  SERR :                        F274 C |
 SLOOP :                       F248 C |  SREC :                        F218 C |
 STYP :                           6 - |  SVERIFY :                     F26A C |
 SWI :                         F2B7 C | *TIME :                   "4:25:40" - |
*TRUE :                           1 - |  USERH :                          2 - |
 USERL :                          3 - | *VERSION :                     142F - |
*_HEXIO_ :                        1 - | *_UART_ :                         1 - |

    107 symbols
     32 unused symbols
 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 14 - 2/27/2023 4:25:40



 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 15 - 2/27/2023 4:25:40


  Defined Macros:
  ---------------

LEDOFF                                | LEDON                                
LEDTOGGLE                             |

      3 macros

 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 16 - 2/27/2023 4:25:40


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page
 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 17 - 2/27/2023 4:25:40



  Cross Reference List:
  ---------------------

symbol ADDRH (=0, monitor.asm:26):
 file monitor.asm :
     44       56       61       81       89       91       97       99    
    109      116      168      178      196      199      214    

symbol ADDRL (=1, monitor.asm:27):
 file monitor.asm :
     43       57      171      177    

symbol DOINC (=F1AD, monitor.asm:88):
 file monitor.asm :
     83    

symbol EXIT45 (=F0D1, Y:\software\6802\monitor\../common\uart.asm:77):
 file Y:\software\6802\monitor\../common\uart.asm :
     73    

symbol EXIT85 (=F29A, monitor.asm:229):
 file monitor.asm :
    222    

symbol FT240_FLUSH (=F090, Y:\software\6802\monitor\../common\uart.asm:38):
 file Y:\software\6802\monitor\../common\uart.asm :
     46    

symbol FT240_INIT (=F074, Y:\software\6802\monitor\../common\uart.asm:25):
 file monitor.asm :
     38    

symbol FT240_NOSTB (=E, Y:\software\6802\monitor\../common\uart.asm:18):
 file Y:\software\6802\monitor\../common\uart.asm :
     26       44       87    

symbol FT240_RDSTB (=C, Y:\software\6802\monitor\../common\uart.asm:19):
 file Y:\software\6802\monitor\../common\uart.asm :
     41       84    

symbol FT240_RXF (=80, Y:\software\6802\monitor\../common\uart.asm:21):
 file Y:\software\6802\monitor\../common\uart.asm :
     35    

symbol FT240_SIWU (=20, Y:\software\6802\monitor\../common\uart.asm:17):
 file Y:\software\6802\monitor\../common\uart.asm :
     34    

symbol FT240_TXE (=40, Y:\software\6802\monitor\../common\uart.asm:20):
 file Y:\software\6802\monitor\../common\uart.asm :
     35       55    

symbol FT240_WRMSK (=1, Y:\software\6802\monitor\../common\uart.asm:16):
 file Y:\software\6802\monitor\../common\uart.asm :
     29       34       62       64    

symbol GETCHAR (=F0E8, Y:\software\6802\monitor\../common\uart.asm:96):
 file monitor.asm :
     67      146      155    
 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 18 - 2/27/2023 4:25:40


 file Y:\software\6802\monitor\../common\uart.asm :
     98    
 file Y:\software\6802\monitor\../common\hexio.asm :
     23    

symbol GETCHARNB (=F0D2, Y:\software\6802\monitor\../common\uart.asm:81):
 file Y:\software\6802\monitor\../common\uart.asm :
     97    

symbol GETHEXBYTE (=F0ED, Y:\software\6802\monitor\../common\hexio.asm:6):
 file monitor.asm :
    221    

symbol GETHEXBYTEEXIT49 (=F0FF, Y:\software\6802\monitor\../common\hexio.asm:19):
 file Y:\software\6802\monitor\../common\hexio.asm :
      8       15    

symbol GETHEXBYTESREC (=F28B, monitor.asm:220):
 file monitor.asm :
    163      166      169      186      202    

symbol GETHEXDIGIT (=F100, Y:\software\6802\monitor\../common\hexio.asm:22):
 file Y:\software\6802\monitor\../common\hexio.asm :
      7       14    

symbol GOTHEX51 (=F114, Y:\software\6802\monitor\../common\hexio.asm:37):
 file Y:\software\6802\monitor\../common\hexio.asm :
     31    

symbol HEXCHARS (=F146, Y:\software\6802\monitor\../common\hexio.asm:73):
 file Y:\software\6802\monitor\../common\hexio.asm :
     28       49       57    

symbol INFOCMD (=F169, monitor.asm:48):
 file monitor.asm :
     73    

symbol INFOSTR (=F2A0, monitor.asm:235):
 file monitor.asm :
     49    

symbol INITMON (=F15F, monitor.asm:41):
 file monitor.asm :
    218    

symbol IRQ (=F2B5, monitor.asm:238):
 file monitor.asm :
    239    
 file Y:\software\6802\monitor\../common\vec.asm :
      5    

symbol LED_BLUE (=2, Y:\software\6802\monitor\../common\LED.asm:7):
 file Y:\software\6802\monitor\../common\LED.asm :
     41       44       56       57       58    

symbol LED_GREEN (=8, Y:\software\6802\monitor\../common\LED.asm:6):
 file Y:\software\6802\monitor\../common\LED.asm :
     41       44       52       53       54    

symbol LED_INIT (=F000, Y:\software\6802\monitor\../common\LED.asm:39):
 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 19 - 2/27/2023 4:25:40


 file monitor.asm :
     39    

symbol LED_RED (=4, Y:\software\6802\monitor\../common\LED.asm:5):
 file Y:\software\6802\monitor\../common\LED.asm :
     41       44       48       49       50    

symbol LED_RED_OFF (=F01C, Y:\software\6802\monitor\../common\LED.asm:49):
 file monitor.asm :
    160    

symbol LED_RED_ON (=F011, Y:\software\6802\monitor\../common\LED.asm:48):
 file monitor.asm :
    208    

symbol LOADSREC (=F1FA, monitor.asm:145):
 file monitor.asm :
     75    

symbol NEXTCHAR (=F18C, monitor.asm:66):
 file monitor.asm :
    142    

symbol NMI (=F2B9, monitor.asm:244):
 file monitor.asm :
    245    
 file Y:\software\6802\monitor\../common\vec.asm :
      7    

symbol NOCHAR43 (=F0A2, Y:\software\6802\monitor\../common\uart.asm:47):
 file Y:\software\6802\monitor\../common\uart.asm :
     40    

symbol NOCHAR46 (=F0E6, Y:\software\6802\monitor\../common\uart.asm:91):
 file Y:\software\6802\monitor\../common\uart.asm :
     83    

symbol NOTADDR (=F1DD, monitor.asm:122):
 file monitor.asm :
    114    

symbol NOTDEC (=F1BF, monitor.asm:102):
 file monitor.asm :
     96    

symbol NOTGO (=F1CD, monitor.asm:112):
 file monitor.asm :
    104    

symbol NOTINC (=F1B4, monitor.asm:94):
 file monitor.asm :
     87    

symbol NOTWRITE (=F1A9, monitor.asm:85):
 file monitor.asm :
     79    

symbol PARSEHEXDIGIT (=F103, Y:\software\6802\monitor\../common\hexio.asm:24):
 file monitor.asm :
    124    
 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 20 - 2/27/2023 4:25:40



symbol PARSELOOP51 (=F10A, Y:\software\6802\monitor\../common\hexio.asm:29):
 file Y:\software\6802\monitor\../common\hexio.asm :
     34    

symbol PIA_BASE (=200, Y:\software\6802\monitor\../common\uart.asm:5):
 file Y:\software\6802\monitor\../common\uart.asm :
      6        7        8        9       10       11    

symbol PIA_DDRA (=203, Y:\software\6802\monitor\../common\uart.asm:9):
 file Y:\software\6802\monitor\../common\uart.asm :
     32       60       67    

symbol PIA_DDRB (=202, Y:\software\6802\monitor\../common\uart.asm:8):
 file Y:\software\6802\monitor\../common\LED.asm :
     43       45    
 file Y:\software\6802\monitor\../common\uart.asm :
     33       36    

symbol PIA_IN (=0, Y:\software\6802\monitor\../common\uart.asm:13):
 file Y:\software\6802\monitor\../common\uart.asm :
     31       66    

symbol PIA_OUT (=FF, Y:\software\6802\monitor\../common\uart.asm:14):
 file Y:\software\6802\monitor\../common\uart.asm :
     59    

symbol PIA_PCR (=20C, Y:\software\6802\monitor\../common\uart.asm:11):
 file Y:\software\6802\monitor\../common\uart.asm :
     27       42       45       85       88    

symbol PIA_PORTA (=201, Y:\software\6802\monitor\../common\uart.asm:7):
 file Y:\software\6802\monitor\../common\uart.asm :
     58       86    

symbol PIA_PORTB (=200, Y:\software\6802\monitor\../common\uart.asm:6):
 file Y:\software\6802\monitor\../common\LED.asm :
     40       42       48( 2)   49( 2)   50( 2)   52( 2)   53( 2)   54( 2)
     56( 2)   57( 2)   58( 2)
 file Y:\software\6802\monitor\../common\uart.asm :
     28       30       39       54       61       63       65       82    

symbol PROMPT (=F16F, monitor.asm:52):
 file monitor.asm :
     77       92      100      120      125      158    

symbol PTRH (=4, monitor.asm:30):
 file Y:\software\6802\monitor\../common\hexio.asm :
     50       53       58       61    

symbol PTRL (=5, monitor.asm:31):
 file Y:\software\6802\monitor\../common\hexio.asm :
     51       52       59       60    

symbol PUTCHAR (=F0A3, Y:\software\6802\monitor\../common\uart.asm:51):
 file monitor.asm :
     55       60       65      181      191    
 file Y:\software\6802\monitor\../common\uart.asm :
     74    
 file Y:\software\6802\monitor\../common\hexio.asm :
 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 21 - 2/27/2023 4:25:40


     55       63    

symbol PUTHEX16 (=F13E, Y:\software\6802\monitor\../common\hexio.asm:66):
 file monitor.asm :
     58      179    

symbol PUTHEX8 (=F117, Y:\software\6802\monitor\../common\hexio.asm:43):
 file monitor.asm :
     63    
 file Y:\software\6802\monitor\../common\hexio.asm :
     69       71    

symbol PUTSTR (=F0C7, Y:\software\6802\monitor\../common\uart.asm:71):
 file monitor.asm :
     50      176    
 file Y:\software\6802\monitor\../common\uart.asm :
     76    

symbol PUTWAIT44 (=F0A4, Y:\software\6802\monitor\../common\uart.asm:53):
 file Y:\software\6802\monitor\../common\uart.asm :
     56    

symbol READTOEOL (=F20B, monitor.asm:154):
 file monitor.asm :
    157      209      213      216    

symbol RESET (=F156, monitor.asm:36):
 file monitor.asm :
    105      107    
 file Y:\software\6802\monitor\../common\vec.asm :
      8    

symbol S0REC (=F215, monitor.asm:159):
 file monitor.asm :
    149    

symbol S0TAG (=F29B, monitor.asm:232):
 file monitor.asm :
    175    

symbol S1REC (=F25D, monitor.asm:193):
 file monitor.asm :
    190    

symbol SCHK (=8, monitor.asm:34):
 file monitor.asm :
    162      204      224      225    

symbol SCHKOK (=F279, monitor.asm:210):
 file monitor.asm :
    206    

symbol SCNT (=7, monitor.asm:33):
 file monitor.asm :
    165      183      226    

symbol SERR (=F274, monitor.asm:207):
 file monitor.asm :
    164      167      170      187      203    

 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 22 - 2/27/2023 4:25:40


symbol SLOOP (=F248, monitor.asm:182):
 file monitor.asm :
    174      192      195      200    

symbol SREC (=F218, monitor.asm:161):
 file monitor.asm :
    151      153    

symbol STYP (=6, monitor.asm:32):
 file monitor.asm :
    147      172      188      211    

symbol SVERIFY (=F26A, monitor.asm:201):
 file monitor.asm :
    185    

symbol SWI (=F2B7, monitor.asm:241):
 file monitor.asm :
    242    
 file Y:\software\6802\monitor\../common\vec.asm :
      6    

symbol USERH (=2, monitor.asm:28):
 file monitor.asm :
     46      115      119      128      138    

symbol USERL (=3, monitor.asm:29):
 file monitor.asm :
     45       80      118      127      137      140      141    

symbol _HEXIO_ (=1, Y:\software\6802\monitor\../common\hexio.asm:2):
 file Y:\software\6802\monitor\../common\hexio.asm :
      1    

symbol _UART_ (=1, Y:\software\6802\monitor\../common\uart.asm:2):
 file Y:\software\6802\monitor\../common\uart.asm :
      1( 2)



0.05 seconds assembly time

    592 lines source file
    655 lines incl. macro expansions
      3 passes
      0 errors
      0 warnings
