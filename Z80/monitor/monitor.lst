 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 1 - 2/24/2023 1:34:28


       1/       0 :                         CPU     Z80
       2/       0 :                         include "vec.asm"
(1)    1/       0 :                         CPU     Z80
(1)    2/       0 :                     
(1)    3/       0 :                         ORG     $0000   ; Reset
(1)    4/       0 : C3 B9 01                jp      reset
(1)    5/       3 :                     
(1)    6/      38 :                         ORG     $0038   ; IRQ
(1)    7/      38 :                      irq:
(1)    8/      38 : C3 38 00                jp      irq
(1)    9/      3B :                         
(1)   10/      66 :                         ORG     $0066   ; NMI
(1)   11/      66 :                      nmi:
(1)   12/      66 : C3 66 00                jp      nmi
(1)   13/      69 :                         
(1)   14/      69 :                         
(1)   15/      69 :                     
       3/      69 :                     
       4/      80 :                         ORG     $0080
       5/      80 :                         include "LED.asm"
(1)    1/      80 :                         CPU     Z80
(1)    2/      80 :                         
(1)    3/      80 :                     ; PIA already defined in uart.asm
(1)    4/      80 :                     
(1)    5/      80 : =4H                  LED_RED     EQU     $04
(1)    6/      80 : =8H                  LED_GREEN   EQU     $08
(1)    7/      80 : =2H                  LED_BLUE    EQU     $02
(1)    8/      80 :                     
(1)    9/      80 :                     ledon   macro   name,bitName,{GLOBALSYMBOLS}
(1)   10/      80 :                     LED_name_On:
(1)   11/      80 :                         ex      af,af'
(1)   12/      80 :                         in      a,PIA_PORTB
(1)   13/      80 :                         or      LED_RED
(1)   14/      80 :                         out     PIA_PORTB,a
(1)   15/      80 :                         ex      af,af'
(1)   16/      80 :                         ret
(1)   17/      80 :                         endm
(1)   18/      80 :                         
(1)   19/      80 :                     ledoff   macro   name,bitName,{GLOBALSYMBOLS}
(1)   20/      80 :                     LED_name_Off:
(1)   21/      80 :                         ex      af,af'
(1)   22/      80 :                         in      a,PIA_PORTB
(1)   23/      80 :                         and     (~LED_RED) & 255
(1)   24/      80 :                         out     PIA_PORTB,a
(1)   25/      80 :                         ex      af,af'
(1)   26/      80 :                         ret
(1)   27/      80 :                         endm
(1)   28/      80 :                     
(1)   29/      80 :                     ledtoggle   macro   name,bitName,{GLOBALSYMBOLS}
(1)   30/      80 :                     LED_name_Toggle:
(1)   31/      80 :                         ex      af,af'
(1)   32/      80 :                         in      a,PIA_PORTB
(1)   33/      80 :                         xor     LED_RED
(1)   34/      80 :                         out     PIA_PORTB,a
(1)   35/      80 :                         ex      af,af'
(1)   36/      80 :                         ret
(1)   37/      80 :                         endm
(1)   38/      80 :                     
(1)   39/      80 :                     LED_init:
(1)   40/      80 : DB 00                   in      a,PIA_PORTB
 AS V1.42 Beta [Bld 223] - Source File monitor.asm(LED.asm) - Page 2 - 2/24/2023 1:34:28


(1)   41/      82 : E6 F1                   and     (~(LED_RED | LED_GREEN | LED_BLUE)) & 255
(1)   42/      84 : D3 00                   out     PIA_PORTB,a
(1)   43/      86 : DB 02                   in      a,PIA_DDRB
(1)   44/      88 : F6 0E                   or      (LED_RED | LED_GREEN | LED_BLUE) & 255
(1)   45/      8A : D3 02                   out     PIA_DDRB,a
(1)   46/      8C : C9                      ret
(1)   47/      8D :                     
(1)   48/      8D : (MACRO)                  ledon       Red,LED_RED
(1)   48/      8D :                     LED_RED_On:
(1)   48/      8D : 08                      ex      af,af'
(1)   48/      8E : DB 00                   in      a,PIA_PORTB
(1)   48/      90 : F6 04                   or      LED_RED
(1)   48/      92 : D3 00                   out     PIA_PORTB,a
(1)   48/      94 : 08                      ex      af,af'
(1)   48/      95 : C9                      ret
(1)   49/      96 : (MACRO)                  ledoff      Red,LED_RED
(1)   49/      96 :                     LED_RED_Off:
(1)   49/      96 : 08                      ex      af,af'
(1)   49/      97 : DB 00                   in      a,PIA_PORTB
(1)   49/      99 : E6 FB                   and     (~LED_RED) & 255
(1)   49/      9B : D3 00                   out     PIA_PORTB,a
(1)   49/      9D : 08                      ex      af,af'
(1)   49/      9E : C9                      ret
(1)   50/      9F : (MACRO)                  ledtoggle   Red,LED_RED
(1)   50/      9F :                     LED_RED_Toggle:
(1)   50/      9F : 08                      ex      af,af'
(1)   50/      A0 : DB 00                   in      a,PIA_PORTB
(1)   50/      A2 : EE 04                   xor     LED_RED
(1)   50/      A4 : D3 00                   out     PIA_PORTB,a
(1)   50/      A6 : 08                      ex      af,af'
(1)   50/      A7 : C9                      ret
(1)   51/      A8 :                         
(1)   52/      A8 : (MACRO)                  ledon       Green,LED_GREEN
(1)   52/      A8 :                     LED_GREEN_On:
(1)   52/      A8 : 08                      ex      af,af'
(1)   52/      A9 : DB 00                   in      a,PIA_PORTB
(1)   52/      AB : F6 04                   or      LED_RED
(1)   52/      AD : D3 00                   out     PIA_PORTB,a
(1)   52/      AF : 08                      ex      af,af'
(1)   52/      B0 : C9                      ret
(1)   53/      B1 : (MACRO)                  ledoff      Green,LED_GREEN
(1)   53/      B1 :                     LED_GREEN_Off:
(1)   53/      B1 : 08                      ex      af,af'
(1)   53/      B2 : DB 00                   in      a,PIA_PORTB
(1)   53/      B4 : E6 FB                   and     (~LED_RED) & 255
(1)   53/      B6 : D3 00                   out     PIA_PORTB,a
(1)   53/      B8 : 08                      ex      af,af'
(1)   53/      B9 : C9                      ret
(1)   54/      BA : (MACRO)                  ledtoggle   Green,LED_GREEN
(1)   54/      BA :                     LED_GREEN_Toggle:
(1)   54/      BA : 08                      ex      af,af'
(1)   54/      BB : DB 00                   in      a,PIA_PORTB
(1)   54/      BD : EE 04                   xor     LED_RED
(1)   54/      BF : D3 00                   out     PIA_PORTB,a
(1)   54/      C1 : 08                      ex      af,af'
(1)   54/      C2 : C9                      ret
(1)   55/      C3 :                     
(1)   56/      C3 : (MACRO)                  ledon       Blue,LED_BLUE
(1)   56/      C3 :                     LED_BLUE_On:
(1)   56/      C3 : 08                      ex      af,af'
 AS V1.42 Beta [Bld 223] - Source File monitor.asm(LED.asm) - Page 3 - 2/24/2023 1:34:28


(1)   56/      C4 : DB 00                   in      a,PIA_PORTB
(1)   56/      C6 : F6 04                   or      LED_RED
(1)   56/      C8 : D3 00                   out     PIA_PORTB,a
(1)   56/      CA : 08                      ex      af,af'
(1)   56/      CB : C9                      ret
(1)   57/      CC : (MACRO)                  ledoff      Blue,LED_BLUE
(1)   57/      CC :                     LED_BLUE_Off:
(1)   57/      CC : 08                      ex      af,af'
(1)   57/      CD : DB 00                   in      a,PIA_PORTB
(1)   57/      CF : E6 FB                   and     (~LED_RED) & 255
(1)   57/      D1 : D3 00                   out     PIA_PORTB,a
(1)   57/      D3 : 08                      ex      af,af'
(1)   57/      D4 : C9                      ret
(1)   58/      D5 : (MACRO)                  ledtoggle   Blue,LED_BLUE
(1)   58/      D5 :                     LED_BLUE_Toggle:
(1)   58/      D5 : 08                      ex      af,af'
(1)   58/      D6 : DB 00                   in      a,PIA_PORTB
(1)   58/      D8 : EE 04                   xor     LED_RED
(1)   58/      DA : D3 00                   out     PIA_PORTB,a
(1)   58/      DC : 08                      ex      af,af'
(1)   58/      DD : C9                      ret
(1)   59/      DE :                     
(1)   60/      DE :                         
(1)   61/      DE :                         
(1)   62/      DE :                     
       6/      DE :                         include "uart.asm"
(1)    1/      DE : =>UNDEFINED              IFNDEF  _UART_
(1)    2/      DE : =1H                  _UART_   SET     1
(1)    3/      DE :                     
(1)    4/      DE :                         CPU     Z80
(1)    5/      DE :                     
(1)    6/      DE : =0H                  PIA_BASE    EQU     $00
(1)    7/      DE : =0H                  PIA_PORTB   EQU     PIA_BASE + $0
(1)    8/      DE : =1H                  PIA_PORTA   EQU     PIA_BASE + $1
(1)    9/      DE : =2H                  PIA_DDRB    EQU     PIA_BASE + $2
(1)   10/      DE : =3H                  PIA_DDRA    EQU     PIA_BASE + $3
(1)   11/      DE : =0BH                 PIA_ACR     EQU     PIA_BASE + $B
(1)   12/      DE : =0CH                 PIA_PCR     EQU     PIA_BASE + $C
(1)   13/      DE :                         
(1)   14/      DE : =0H                  PIA_IN      EQU     $00
(1)   15/      DE : =0FFH                PIA_OUT     EQU     $FF
(1)   16/      DE :                     
(1)   17/      DE : =1H                  FT240_WRMSK EQU     $01     ; WR on bit-0, pulse high to write to the FIFO
(1)   18/      DE : =20H                 FT240_SIWU  EQU     $20     ; SIWU on bit 5, always high
(1)   19/      DE : =0EH                 FT240_NOSTB EQU     $0E     ; RD# = 1, irqs disabled 
(1)   20/      DE : =0CH                 FT240_RDSTB EQU     $0C     ; RD# = 0, irqs disabled (used to read from the FIFO)
(1)   21/      DE : =40H                 FT240_TXE   EQU     $40     ; TXE# on bit 6 (FIFO can accept data when low)
(1)   22/      DE : =80H                 FT240_RXF   EQU     $80     ; RXF# on bit 7 (FIFO has data when low)
(1)   23/      DE :                     
(1)   24/      DE :                     ; Initialize the VIA to operate iwth the FT240, which is use for console IO.
(1)   25/      DE :                     FT240_init:
(1)   26/      DE : 3E 0E                   ld      a,FT240_NOSTB  ; RD# = 1
(1)   27/      E0 : D3 0C                   out     PIA_PCR,a
(1)   28/      E2 : DB 00                   in      a,PIA_PORTB
(1)   29/      E4 : E6 FE                   and     ~FT240_WRMSK   ; WR = 0, don't touch the other bits
(1)   30/      E6 : F6 20                   or      FT240_SIWU     ; SIWU = 1, dont' tough the other bits
(1)   31/      E8 : D3 00                   out     PIA_PORTB,a
(1)   32/      EA : 3E 00                   ld      a,PIA_IN       ; data port input, its only output when writing to FT240
(1)   33/      EC : D3 03                   out     PIA_DDRA,a
(1)   34/      EE : DB 02                   in      a,PIA_DDRB    ; control ports bits for FT240, don't touch other bits
 AS V1.42 Beta [Bld 223] - Source File monitor.asm(uart.asm) - Page 4 - 2/24/2023 1:34:28


(1)   35/      F0 : F6 21                   or      (FT240_WRMSK | FT240_SIWU) & $FF   ; Ouptut pins
(1)   36/      F2 : E6 3F                   and     (~(FT240_RXF | FT240_TXE)) & $FF   ; Input pins
(1)   37/      F4 : D3 02                   out     PIA_DDRB,a
(1)   38/      F6 :                     
(1)   39/      F6 :                     FT240_Flush:
(1)   40/      F6 : DB 00                   in      a,PIA_PORTB   ; Test RXF# (bit-7)
(1)   41/      F8 : CB 7F                   bit     7,a
(1)   42/      FA : C0                      ret     nz              ; Return when RXF# is set, no data in FIFO
(1)   43/      FB : 3E 0C                   ld      a,FT240_RDSTB  ; FT240 RD# = 0; strobe next byte from FIFO
(1)   44/      FD : D3 0C                   out     PIA_PCR,a
(1)   45/      FF : 00                      nop
(1)   46/     100 : 3E 0E                   ld      a,FT240_NOSTB  ; FT240 RD# = 1
(1)   47/     102 : D3 0C                   out     PIA_PCR,a
(1)   48/     104 : C3 F6 00                jp      FT240_Flush
(1)   49/     107 :                     $$NoChar:
(1)   50/     107 : C9                      ret
(1)   51/     108 :                     
(1)   52/     108 :                     ; Output the value in A to the console
(1)   53/     108 :                     PutChar:
(1)   54/     108 : C5                      push    bc
(1)   55/     109 : 0E 00                   ld      c,PIA_PORTB
(1)   56/     10B :                     $$PutCharPoll:
(1)   57/     10B : ED 40                   in      b,(c)           ; Test TXE (bit-6)
(1)   58/     10D : CB 70                   bit     6,b
(1)   59/     10F : C2 0B 01                jp      nz,$$PutCharPoll     ; When set the FIFO is full, keep polling until there is room
(1)   60/     112 : D3 01                   out     PIA_PORTA,a   ; Write data to port
(1)   61/     114 : 3E FF                   ld      a,PIA_OUT      ; Set data port direction to output
(1)   62/     116 : D3 03                   out     PIA_DDRA,a
(1)   63/     118 : DB 00                   in      a,PIA_PORTB   ; FT240 WR = 1 (don't touch other bits)
(1)   64/     11A : F6 01                   or      FT240_WRMSK
(1)   65/     11C : D3 00                   out     PIA_PORTB,a
(1)   66/     11E : E6 FE                   and     ~FT240_WRMSK   ; FT240 WR = 0
(1)   67/     120 : D3 00                   out     PIA_PORTB,a
(1)   68/     122 : 3E 00                   ld      a,PIA_IN         ; Set data port direction to input
(1)   69/     124 : D3 03                   out     PIA_DDRA,a
(1)   70/     126 : C1                      pop     bc
(1)   71/     127 : C9                      ret
(1)   72/     128 :                     
(1)   73/     128 :                     ; print null terminated string at (HL)
(1)   74/     128 :                     putStr:
(1)   75/     128 : 7E                      ld      a,(hl)              ; get the character
(1)   76/     129 : E6 FF                   and     a,$FF               ; is it $00?
(1)   77/     12B : C8                      ret     z                   ; yes, done
(1)   78/     12C : CD 08 01                call    PutChar             ; no, send it
(1)   79/     12F : 23                      inc     hl                  ; increment pointer
(1)   80/     130 : C3 28 01                jp      putStr              ; output next character
(1)   81/     133 :                     
(1)   82/     133 :                     ; Non-blocking read a character from the console in the acc, C == 1 indicates a character was read
(1)   83/     133 :                     GetCharNB:
(1)   84/     133 : C5                      push    bc
(1)   85/     134 : DB 00                   in      a,PIA_PORTB   ; Test RXF# (bit-7)
(1)   86/     136 : CB 7F                   bit     7,a
(1)   87/     138 : C2 4A 01                jp      nz,$$NoChar        ; Branch when RXF# is set, no data in FIFO
(1)   88/     13B : 3E 0C                   ld      a,FT240_RDSTB   ; FT240 RD# = 0; strobe next byte from FIFO
(1)   89/     13D : D3 0C                   out     PIA_PCR,a
(1)   90/     13F : DB 01                   in      a,PIA_PORTA   ; Read data byte from FT240 (assumes DDR in input)
(1)   91/     141 : 47                      ld      b,a
(1)   92/     142 : 3E 0E                   ld      a,FT240_NOSTB    ; FT240 RD# = 1
(1)   93/     144 : D3 0C                   out     PIA_PCR,a
(1)   94/     146 : 37                      scf                     ; Set carry to indicate we read a data byte
 AS V1.42 Beta [Bld 223] - Source File monitor.asm(uart.asm) - Page 5 - 2/24/2023 1:34:28


(1)   95/     147 : 78                      ld      a,b
(1)   96/     148 : C1                      pop     bc
(1)   97/     149 : C9                      ret
(1)   98/     14A :                     $$NoChar:
(1)   99/     14A : 37                      scf                     ; CLear carry to indicate there was nothing to read
(1)  100/     14B : 3F                      ccf                     
(1)  101/     14C : C1                      pop     bc
(1)  102/     14D : C9                      ret
(1)  103/     14E :                     
(1)  104/     14E :                     ; Blocking read a character from the console
(1)  105/     14E :                     GetChar:
(1)  106/     14E : CD 33 01                call    GetCharNB       ; Is a charcter available
(1)  107/     151 : D2 4E 01                jp      nc,GetChar      ; Got a char? Keep polling until we get a char
(1)  108/     154 : C9                      ret
(1)  109/     155 :                         
(1)  110/     155 : [1]                      ENDIF
(1)  111/     155 :                     
       7/     155 :                         include "hexio.asm"
(1)    1/     155 :                     
(1)    2/     155 : =>UNDEFINED              IFNDEF  _HEXIO_
(1)    3/     155 : =1H                  _HEXIO_     SET     1
(1)    4/     155 :                     
(1)    5/     155 :                         include "uart.asm"
(2)    1/     155 : =>DEFINED                IFNDEF  _UART_
(2)    2/     155 :                     _UART_   SET     1
(2)    3/     155 :                     
(2)    4/     155 :                         CPU     Z80
(2)    5/     155 :                     
(2)    6/     155 :                     PIA_BASE    EQU     $00
(2)    7/     155 :                     PIA_PORTB   EQU     PIA_BASE + $0
(2)    8/     155 :                     PIA_PORTA   EQU     PIA_BASE + $1
(2)    9/     155 :                     PIA_DDRB    EQU     PIA_BASE + $2
(2)   10/     155 :                     PIA_DDRA    EQU     PIA_BASE + $3
(2)   11/     155 :                     PIA_ACR     EQU     PIA_BASE + $B
(2)   12/     155 :                     PIA_PCR     EQU     PIA_BASE + $C
(2)   13/     155 :                         
(2)   14/     155 :                     PIA_IN      EQU     $00
(2)   15/     155 :                     PIA_OUT     EQU     $FF
(2)   16/     155 :                     
(2)   17/     155 :                     FT240_WRMSK EQU     $01     ; WR on bit-0, pulse high to write to the FIFO
(2)   18/     155 :                     FT240_SIWU  EQU     $20     ; SIWU on bit 5, always high
(2)   19/     155 :                     FT240_NOSTB EQU     $0E     ; RD# = 1, irqs disabled 
(2)   20/     155 :                     FT240_RDSTB EQU     $0C     ; RD# = 0, irqs disabled (used to read from the FIFO)
(2)   21/     155 :                     FT240_TXE   EQU     $40     ; TXE# on bit 6 (FIFO can accept data when low)
(2)   22/     155 :                     FT240_RXF   EQU     $80     ; RXF# on bit 7 (FIFO has data when low)
(2)   23/     155 :                     
(2)   24/     155 :                     ; Initialize the VIA to operate iwth the FT240, which is use for console IO.
(2)   25/     155 :                     FT240_init:
(2)   26/     155 :                         ld      a,FT240_NOSTB  ; RD# = 1
(2)   27/     155 :                         out     PIA_PCR,a
(2)   28/     155 :                         in      a,PIA_PORTB
(2)   29/     155 :                         and     ~FT240_WRMSK   ; WR = 0, don't touch the other bits
(2)   30/     155 :                         or      FT240_SIWU     ; SIWU = 1, dont' tough the other bits
(2)   31/     155 :                         out     PIA_PORTB,a
(2)   32/     155 :                         ld      a,PIA_IN       ; data port input, its only output when writing to FT240
(2)   33/     155 :                         out     PIA_DDRA,a
(2)   34/     155 :                         in      a,PIA_DDRB    ; control ports bits for FT240, don't touch other bits
(2)   35/     155 :                         or      (FT240_WRMSK | FT240_SIWU) & $FF   ; Ouptut pins
(2)   36/     155 :                         and     (~(FT240_RXF | FT240_TXE)) & $FF   ; Input pins
(2)   37/     155 :                         out     PIA_DDRB,a
 AS V1.42 Beta [Bld 223] - Source File monitor.asm(uart.asm) - Page 6 - 2/24/2023 1:34:28


(2)   38/     155 :                     
(2)   39/     155 :                     FT240_Flush:
(2)   40/     155 :                         in      a,PIA_PORTB   ; Test RXF# (bit-7)
(2)   41/     155 :                         bit     7,a
(2)   42/     155 :                         ret     nz              ; Return when RXF# is set, no data in FIFO
(2)   43/     155 :                         ld      a,FT240_RDSTB  ; FT240 RD# = 0; strobe next byte from FIFO
(2)   44/     155 :                         out     PIA_PCR,a
(2)   45/     155 :                         nop
(2)   46/     155 :                         ld      a,FT240_NOSTB  ; FT240 RD# = 1
(2)   47/     155 :                         out     PIA_PCR,a
(2)   48/     155 :                         jp      FT240_Flush
(2)   49/     155 :                     $$NoChar:
(2)   50/     155 :                         ret
(2)   51/     155 :                     
(2)   52/     155 :                     ; Output the value in A to the console
(2)   53/     155 :                     PutChar:
(2)   54/     155 :                         push    bc
(2)   55/     155 :                         ld      c,PIA_PORTB
(2)   56/     155 :                     $$PutCharPoll:
(2)   57/     155 :                         in      b,(c)           ; Test TXE (bit-6)
(2)   58/     155 :                         bit     6,b
(2)   59/     155 :                         jp      nz,$$PutCharPoll     ; When set the FIFO is full, keep polling until there is room
(2)   60/     155 :                         out     PIA_PORTA,a   ; Write data to port
(2)   61/     155 :                         ld      a,PIA_OUT      ; Set data port direction to output
(2)   62/     155 :                         out     PIA_DDRA,a
(2)   63/     155 :                         in      a,PIA_PORTB   ; FT240 WR = 1 (don't touch other bits)
(2)   64/     155 :                         or      FT240_WRMSK
(2)   65/     155 :                         out     PIA_PORTB,a
(2)   66/     155 :                         and     ~FT240_WRMSK   ; FT240 WR = 0
(2)   67/     155 :                         out     PIA_PORTB,a
(2)   68/     155 :                         ld      a,PIA_IN         ; Set data port direction to input
(2)   69/     155 :                         out     PIA_DDRA,a
(2)   70/     155 :                         pop     bc
(2)   71/     155 :                         ret
(2)   72/     155 :                     
(2)   73/     155 :                     ; print null terminated string at (HL)
(2)   74/     155 :                     putStr:
(2)   75/     155 :                         ld      a,(hl)              ; get the character
(2)   76/     155 :                         and     a,$FF               ; is it $00?
(2)   77/     155 :                         ret     z                   ; yes, done
(2)   78/     155 :                         call    PutChar             ; no, send it
(2)   79/     155 :                         inc     hl                  ; increment pointer
(2)   80/     155 :                         jp      putStr              ; output next character
(2)   81/     155 :                     
(2)   82/     155 :                     ; Non-blocking read a character from the console in the acc, C == 1 indicates a character was read
(2)   83/     155 :                     GetCharNB:
(2)   84/     155 :                         push    bc
(2)   85/     155 :                         in      a,PIA_PORTB   ; Test RXF# (bit-7)
(2)   86/     155 :                         bit     7,a
(2)   87/     155 :                         jp      nz,$$NoChar        ; Branch when RXF# is set, no data in FIFO
(2)   88/     155 :                         ld      a,FT240_RDSTB   ; FT240 RD# = 0; strobe next byte from FIFO
(2)   89/     155 :                         out     PIA_PCR,a
(2)   90/     155 :                         in      a,PIA_PORTA   ; Read data byte from FT240 (assumes DDR in input)
(2)   91/     155 :                         ld      b,a
(2)   92/     155 :                         ld      a,FT240_NOSTB    ; FT240 RD# = 1
(2)   93/     155 :                         out     PIA_PCR,a
(2)   94/     155 :                         scf                     ; Set carry to indicate we read a data byte
(2)   95/     155 :                         ld      a,b
(2)   96/     155 :                         pop     bc
(2)   97/     155 :                         ret
 AS V1.42 Beta [Bld 223] - Source File monitor.asm(uart.asm) - Page 7 - 2/24/2023 1:34:28


(2)   98/     155 :                     $$NoChar:
(2)   99/     155 :                         scf                     ; CLear carry to indicate there was nothing to read
(2)  100/     155 :                         ccf                     
(2)  101/     155 :                         pop     bc
(2)  102/     155 :                         ret
(2)  103/     155 :                     
(2)  104/     155 :                     ; Blocking read a character from the console
(2)  105/     155 :                     GetChar:
(2)  106/     155 :                         call    GetCharNB       ; Is a charcter available
(2)  107/     155 :                         jp      nc,GetChar      ; Got a char? Keep polling until we get a char
(2)  108/     155 :                         ret
(2)  109/     155 :                         
(2)  110/     155 : [1]                      ENDIF
(2)  111/     155 :                     
(1)    6/     155 :                     
(1)    7/     155 :                     getHexByte:
(1)    8/     155 : CD 6A 01                call    getHexDigit         ; get the first hex digit
(1)    9/     158 : D8                      ret     c                   ; bail on error
(1)   10/     159 : 57                      ld      d,a                 ; Save the first digit to high nibble    
(1)   11/     15A : CB 22                   sla     d
(1)   12/     15C : CB 22                   sla     d
(1)   13/     15E : CB 22                   sla     d
(1)   14/     160 : CB 22                   sla     d
(1)   15/     162 : CD 6A 01                call    getHexDigit         ; Get second hex digit
(1)   16/     165 : D8                      ret     c                   ; bail on error
(1)   17/     166 : B2                      or      d                   ; combine with the fist digit to form the byte value
(1)   18/     167 : E6 FF                   and     a,$ff               ; clear carty ofr success
(1)   19/     169 : C9                      ret
(1)   20/     16A :                         
(1)   21/     16A :                     getHexDigit:
(1)   22/     16A : CD 4E 01                call    GetChar             ; Get a character
(1)   23/     16D :                     parseHexDigit:
(1)   24/     16D : F6 20                   or      $20                 ; Force to lower
(1)   25/     16F : 21 A9 01                ld      hl,HexChars         ; Lookup hex digit in table
(1)   26/     172 : 01 10 00                ld      bc,16
(1)   27/     175 : ED B1                   cpir
(1)   28/     177 : C2 7E 01                jp      nz,notHex           ; Jump when a hex digit was found
(1)   29/     17A : 79                      ld      a,c
(1)   30/     17B : EE 0F                   xor     a,$0F               ; clear carry to indicate success reading a hex byte
(1)   31/     17D : C9                      ret    
(1)   32/     17E :                     notHex:
(1)   33/     17E : 37                      scf                         ; set carry to indicate failure 
(1)   34/     17F : C9                      ret
(1)   35/     180 :                         
(1)   36/     180 :                     ; print A as a hex value
(1)   37/     180 :                     ; uses b, hl
(1)   38/     180 :                     putHex8:
(1)   39/     180 : 47                      ld      b,a                 ; save value for later
(1)   40/     181 : CB 3F                   srl     a                   ; move high nibble to low
(1)   41/     183 : CB 3F                   srl     a
(1)   42/     185 : CB 3F                   srl     a
(1)   43/     187 : CB 3F                   srl     a
(1)   44/     189 : 21 A9 01                ld      hl,HexChars         ; lookup hex digit              
(1)   45/     18C : 85                      add     a,l                 ; (only works when table does not pass page boundary)
(1)   46/     18D : 6F                      ld      l,a
(1)   47/     18E : 7E                      ld      a,(hl)              
(1)   48/     18F : CD 08 01                call    PutChar             ; Send out high digit
(1)   49/     192 : 78                      ld      a,b                 ; get value back
(1)   50/     193 : E6 0F                   and     $0f                 ; mask high nibble away
(1)   51/     195 : 21 A9 01                ld      hl,HexChars         ; lookup hex digit              
 AS V1.42 Beta [Bld 223] - Source File monitor.asm(hexio.asm) - Page 8 - 2/24/2023 1:34:28


(1)   52/     198 : 85                      add     a,l                 ; (only works when table does not pass page boundary)
(1)   53/     199 : 6F                      ld      l,a
(1)   54/     19A : 7E                      ld      a,(hl)              
(1)   55/     19B : CD 08 01                call    PutChar             ; Send out low digit
(1)   56/     19E : C9                      ret
(1)   57/     19F :                         
(1)   58/     19F :                     ; print HL as a hex value
(1)   59/     19F :                     ; uses a, b, hl
(1)   60/     19F :                     putHex16:
(1)   61/     19F : E5                      push    hl                  ; save value for later
(1)   62/     1A0 : 7C                      ld      a,h                 ; print the h byte
(1)   63/     1A1 : CD 80 01                call    putHex8
(1)   64/     1A4 : E1                      pop     hl                  ; get the value back
(1)   65/     1A5 : 7D                      ld      a,l                 ; print the l byte
(1)   66/     1A6 : C3 80 01                jp      putHex8
(1)   67/     1A9 :                     
(1)   68/     1A9 :                     HexChars:
(1)   69/     1A9 : 30 31 32 33 34 35       db     "0123456789abcdef"
              1AF : 36 37 38 39 61 62 
              1B5 : 63 64 65 66       
(1)   70/     1B9 :                     
(1)   71/     1B9 : [2]                      ENDIF
       8/     1B9 :                     
       9/     1B9 :                     ; Order is important
      10/     1B9 : =0EFF0H              STYP    EQU     $EFF0
      11/     1B9 : =0EFF1H              SCNT    EQU     $EFF1   
      12/     1B9 : =0EFF2H              SCHK    EQU     $EFF2   
      13/     1B9 : =0EFF3H              ADDRL   EQU     $EFF3
      14/     1B9 : =0EFF4H              ADDRH   EQU     $EFF4
      15/     1B9 : =0EFF5H              USERL   EQU     $EFF5
      16/     1B9 : =0EFF6H              USERH   EQU     $EFF6
      17/     1B9 :                     
      18/     1B9 :                     ; Simple monitor:
      19/     1B9 :                     ; Prompt messsage is:
      20/     1B9 :                     ; 
      21/     1B9 :                     ; aaaa bb>
      22/     1B9 :                     ; 
      23/     1B9 :                     ; Where aaaa is the current addess and bb is the current value at that address.
      24/     1B9 :                     ;
      25/     1B9 :                     ; Commands:
      26/     1B9 :                     ; ?     Show the info message
      27/     1B9 :                     ; =     Re-read the current address
      28/     1B9 :                     ; <lf>  Write to current address and increment address
      29/     1B9 :                     ; +     Increment current address
      30/     1B9 :                     ; -     Decrement current address
      31/     1B9 :                     ; g     Go to current address
      32/     1B9 :                     ; <sp>  Set current address
      33/     1B9 :                     
      34/     1B9 :                     ; HL is addrH, addrL
      35/     1B9 :                     ; DE is userH, userL
      36/     1B9 :                     
      37/     1B9 :                     reset:
      38/     1B9 : ED 56                   im      1               ; Use a known vector for interrups
      39/     1BB : 31 FF FF                ld      sp,$FFFF
      40/     1BE : CD DE 00                call    FT240_init
      41/     1C1 : CD 80 00                call    LED_init
      42/     1C4 :                     
      43/     1C4 :                     InitMon:
      44/     1C4 : 21 00 00                ld      hl,$0000
      45/     1C7 : 22 F3 EF                ld      (ADDRL),hl
 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 9 - 2/24/2023 1:34:28


      46/     1CA : 22 F5 EF                ld      (USERL),hl
      47/     1CD :                         
      48/     1CD :                     InfoCmd:
      49/     1CD : 21 27 03                ld      hl,InfoStr
      50/     1D0 : CD 28 01                call    putStr
      51/     1D3 :                     
      52/     1D3 :                     Prompt:
      53/     1D3 :                     ;    call    LED_RED_Off
      54/     1D3 : 3E 0A                   ld      a,$0a           ; Show Prompt
      55/     1D5 : CD 08 01                call    PutChar
      56/     1D8 : 2A F3 EF                ld      hl,(ADDRL)      ; Show the address
      57/     1DB : CD 9F 01                call    putHex16
      58/     1DE : 3E 20                   ld      a,' '             ; Space to seperate address and data
      59/     1E0 : CD 08 01                call    PutChar
      60/     1E3 : 2A F3 EF                ld      hl,(ADDRL)
      61/     1E6 : 7E                      ld      a,(hl)
      62/     1E7 : CD 80 01                call    putHex8
      63/     1EA : 3E 3E                   ld      a,'>'            ; Show Prompt
      64/     1EC : CD 08 01                call    PutChar
      65/     1EF :                      NextChar:   
      66/     1EF : CD 4E 01                call    GetChar         ; get char from user (blocking)
      67/     1F2 :                     ;    call    LED_RED_On
      68/     1F2 :                     ;    call    PutChar         ; Should we echo the character?????
      69/     1F2 : FE 3F                   cp      '?'             ; Show info?
      70/     1F4 : CA CD 01                jp      z,InfoCmd
      71/     1F7 : FE 53                   cp      'S'             ; S-record?
      72/     1F9 : CA 62 02                jp      z,LoadSrec
      73/     1FC : FE 3D                   cp      '='             ; re-read address?
      74/     1FE : CA D3 01                jp      z,Prompt
      75/     201 : FE 0A                   cp      $0a             ; Write data byte?
      76/     203 : C2 10 02                jp      nz,NotWrite
      77/     206 : 2A F3 EF                ld      hl,(ADDRL)
      78/     209 : 3A F5 EF                ld      a,(USERL)
      79/     20C : 77                      ld      (hl),a          ; Store the last 8-bit value entered at the current address    
      80/     20D : C3 15 02                jp      DoInc           ; Increment the current address
      81/     210 :                     
      82/     210 :                     NotWrite:
      83/     210 : FE 2B                   cp     '+'              ; Incement address?
      84/     212 : C2 1B 02                jp      nz,NotInc
      85/     215 :                     DoInc:
      86/     215 : CD 52 02                call    IncAddr
      87/     218 : C3 D3 01                jp      Prompt
      88/     21B :                     
      89/     21B :                     NotInc:
      90/     21B : FE 2D                   cp      '-'             ; Decrement address?
      91/     21D : C2 26 02                jp      nz,NotDec
      92/     220 : CD 5A 02                call    DecAddr
      93/     223 : C3 D3 01                jp      Prompt
      94/     226 :                     
      95/     226 :                     NotDec:
      96/     226 : FE 67                   cp      'g'            ; go to address?
      97/     228 : C2 33 02                jp      nz,NotGo
      98/     22B : 01 B9 01                ld      bc,reset
      99/     22E : C5                      push    bc
     100/     22F : 2A F3 EF                ld      hl,(ADDRL)
     101/     232 : E9                      jp      (hl)
     102/     233 :                     
     103/     233 :                     NotGo:
     104/     233 : FE 20                   cp      ' '            ; set current address?
     105/     235 : C2 41 02                jp      nz,NotAddr
 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 10 - 2/24/2023 1:34:28


     106/     238 : 2A F5 EF                ld      hl,(USERL)
     107/     23B : 22 F3 EF                ld      (ADDRL),hl
     108/     23E : C3 D3 01                jp      Prompt         ; Continue with the new address 
     109/     241 :                     
     110/     241 :                     NotAddr:
     111/     241 :                     ;ParseHex:
     112/     241 : CD 6D 01                call    parseHexDigit
     113/     244 : DA D3 01                jp      c,Prompt          ; Ignore chractervand show prompt
     114/     247 :                     
     115/     247 :                     GotHex:   
     116/     247 : 21 F5 EF                ld      hl,USERL          ; a: E    USERH: AB   USERL: CD
     117/     24A : ED 6F                   rld                       ; a: C    USERH: AB   USERL: DE
     118/     24C : 23                      inc     hl              
     119/     24D : ED 6F                   rld                       ; a: A    USERH: BC   USERL: DE
     120/     24F : C3 EF 01                jp      NextChar
     121/     252 :                         
     122/     252 :                     IncAddr:
     123/     252 : 2A F3 EF                ld  hl,(ADDRL)
     124/     255 : 23                      inc hl
     125/     256 : 22 F3 EF                ld  (ADDRL),hl
     126/     259 : C9                      ret
     127/     25A :                     
     128/     25A :                     DecAddr:
     129/     25A : 2A F3 EF                ld  hl,(ADDRL)
     130/     25D : 2B                      dec hl
     131/     25E : 22 F3 EF                ld  (ADDRL),hl
     132/     261 : C9                      ret
     133/     262 :                     
     134/     262 :                     ; Read and process an S-record
     135/     262 :                     LoadSrec:
     136/     262 : CD 4E 01                call    GetChar             ; Get the S-record type
     137/     265 : 32 F0 EF                ld      (STYP),a            ; Save it for later
     138/     268 : FE 30                   cp      '0'                 ; S0 record?
     139/     26A : CA 82 02                jp      z,S0Rec             ; yes, processes it
     140/     26D : FE 31                   cp      '1'                 ; S1 record?
     141/     26F : CA 85 02                jp      z,SRec              ; yes, process it
     142/     272 : FE 39                   cp      '9'                 ; S9 record?
     143/     274 : CA 85 02                jp      z,SRec              ; yes, process it
     144/     277 :                     ReadToEOL:                      ; Not a support S-reord type
     145/     277 : CD 4E 01                call    GetChar             ; get next char
     146/     27A : FE 0A                   cp      a,'\n'              ; End Of Line?
     147/     27C : C2 77 02                jp      nz,ReadToEOL        ; No, keep reading
     148/     27F : C3 D3 01                jp      Prompt              ; Yes, done with record
     149/     282 :                     S0Rec:
     150/     282 : CD 96 00                call    LED_RED_Off         ; Turn off the error status LED
     151/     285 :                     SRec:
     152/     285 : 3E 00                   ld      a,0                 ; New record, clear the checksum
     153/     287 : 32 F2 EF                ld      (SCHK), a
     154/     28A : CD 10 03                call    getHexByteSrec      ; Get byte count
     155/     28D : DA F9 02                jp      c,SErr              ; skip rest of line when not hex
     156/     290 : 32 F1 EF                ld      (SCNT),a
     157/     293 : CD 10 03                call    getHexByteSrec      ; Get address high
     158/     296 : DA F9 02                jp      c,SErr              ; skip rest of line when not hex
     159/     299 : 32 F4 EF                ld      (ADDRH),a
     160/     29C : CD 10 03                call    getHexByteSrec      ; Get address low
     161/     29F : DA F9 02                jp      c,SErr              ; skip rest of line when not hex
     162/     2A2 : 32 F3 EF                ld      (ADDRL),a
     163/     2A5 : 3A F0 EF                ld      a,(STYP)            ; Is this a S0 record?
     164/     2A8 : FE 30                   cp     '0'                  
     165/     2AA : C2 BE 02                jp      nz,SLoop            ; Nope skip S0Tag    
 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 11 - 2/24/2023 1:34:28


     166/     2AD : 21 22 03                ld      hl,S0Tag            ; Show we got a S0 record 
     167/     2B0 : CD 28 01                call    putStr
     168/     2B3 : 2A F3 EF                ld      hl,(ADDRL)          ; Show the address field
     169/     2B6 : CD 9F 01                call    putHex16
     170/     2B9 : 3E 3A                   ld      a,':'               ; Seperator
     171/     2BB : CD 08 01                call    putChar
     172/     2BE :                     SLoop:
     173/     2BE : 3A F1 EF                ld      a,(SCNT)            ; Is checksum next byte?
     174/     2C1 : 3D                      dec     a
     175/     2C2 : CA EA 02                jp      z,SVerify           ; Yes, verify checksum
     176/     2C5 : CD 10 03                call    getHexByteSrec      ; No, read the next byte as two hex digits
     177/     2C8 : DA F9 02                jp      c,SErr              ; skip rest of line when not hex
     178/     2CB :                         
     179/     2CB : 47                      ld      b,a
     180/     2CC : 3A F0 EF                ld      a,(STYP)            ; What type of record is this?
     181/     2CF : FE 30                   cp     '0'                  ; S0 record?
     182/     2D1 : C2 DB 02                jp      nz,S1Rec
     183/     2D4 : 78                      ld      a,b
     184/     2D5 : CD 08 01                call    putChar             ; yes, echo back to the user as a char
     185/     2D8 : C3 BE 02                jp      SLoop
     186/     2DB :                     S1Rec:
     187/     2DB : FE 31                   cp      '1'                 ; S1 record?
     188/     2DD : C2 BE 02                jp      nz,SLoop            ; no, must be S9, ignore the data
     189/     2E0 : 2A F3 EF                ld      hl,(ADDRL)          ; yes, save the data byte to the current address
     190/     2E3 : 70                      ld      (hl),b
     191/     2E4 : CD 52 02                call    IncAddr             ; Increment the address
     192/     2E7 : C3 BE 02                jp      SLoop
     193/     2EA :                     SVerify:
     194/     2EA : CD 10 03                call    getHexByteSrec      ; read the checksum
     195/     2ED : DA F9 02                jp      c,SErr              ; skip rest of line when not hex
     196/     2F0 : 3A F2 EF                ld      a,(SCHK)            ; Checksum is now valid when it is zero
     197/     2F3 : 3C                      inc     a
     198/     2F4 : FE 00                   cp      a,0
     199/     2F6 : CA FF 02                jp      z,SChkOK            ; Checks out..
     200/     2F9 :                     SErr:
     201/     2F9 : CD 8D 00                call    LED_RED_ON          ; Checksum failed, turn on the red light
     202/     2FC : C3 77 02                jp      ReadToEOL           ; Skip the rest of the line until EOL
     203/     2FF :                     SChkOk:
     204/     2FF : 3A F0 EF                ld      a,(STYP)            ; What was the record type?
     205/     302 : FE 39                   cp     '9'                  ; S9 record?
     206/     304 : C2 77 02                jp      nz,ReadToEOL        ; no, done with this record, skip the rest of the line
     207/     307 : 2A F3 EF                ld      hl,(ADDRL)          ; yes, get the address
     208/     30A : 7C                      ld      a,h                 ; is the address zero?
     209/     30B : 85                      add     a,l
     210/     30C : CA 77 02                jp      z,ReadToEOL         ; yes, done with record
     211/     30F : E9                      jp      (hl)                ; no, transer to specified address (TODO:use go command)
     212/     310 :                     
     213/     310 :                     getHexByteSrec:
     214/     310 : CD 55 01                call    getHexByte          ; get a byte as two hex digits
     215/     313 : D8                      ret     c                   ; bail on error
     216/     314 : 47                      ld      b,a
     217/     315 : 21 F2 EF                ld      hl,SCHK             ; add byte value to running checksum
     218/     318 : 86                      add     a,(hl)
     219/     319 : 77                      ld      (hl),a
     220/     31A : 21 F1 EF                ld      hl,SCNT             ; Decrement the byte count
     221/     31D : 35                      dec     (hl)
     222/     31E : 78                      ld      a,b                 ; return the byte value
     223/     31F : E6 FF                   and     a,$ff               ; clear carty ofr success
     224/     321 : C9                      ret
     225/     322 :                         
 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 12 - 2/24/2023 1:34:28


     226/     322 :                     S0Tag:
     227/     322 : 0A 53 30 20 00          db      10,"S0 ",0
     228/     327 :                         
     229/     327 :                     InfoStr:
     230/     327 : 0A 4D 69 6E 69 4D       db     10,"MiniMon,0.1,Z80,0",10,0
              32D : 6F 6E 2C 30 2E 31 
              333 : 2C 5A 38 30 2C 30 
              339 : 0A 00             
     231/     33B :                     
     232/     33B :                         
 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 13 - 2/24/2023 1:34:28


  Symbol Table (* = unused):
  --------------------------

 ADDRH :                      0EFF4 - |  ADDRL :                      0EFF3 - |
*ARCHITECTURE :                                        "i386-unknown-win32" - |
*CASESENSITIVE :                  0 - | *COMPMODE :                       0 - |
*CONSTPI :        3.141592653589793 - | *DATE :                 "2/24/2023" - |
 DECADDR :                      25A C |  DOINC :                        215 C |
*FALSE :                          0 - |  FT240_FLUSH :                  0F6 C |
 FT240_INIT :                   0DE C |  FT240_NOSTB :                   0E - |
 FT240_RDSTB :                   0C - |  FT240_RXF :                     80 - |
 FT240_SIWU :                    20 - |  FT240_TXE :                     40 - |
 FT240_WRMSK :                    1 - | *FULLPMMU :                       1 - |
 GETCHAR :                      14E C |  GETCHARNB :                    133 C |
 GETHEXBYTE :                   155 C |  GETHEXBYTESREC :               310 C |
 GETHEXDIGIT :                  16A C | *GOTHEX :                       247 C |
*HAS64 :                          0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - |  HEXCHARS :                     1A9 C |
 INCADDR :                      252 C |  INFOCMD :                      1CD C |
 INFOSTR :                      327 C | *INITMON :                      1C4 C |
*INSUPMODE :                      0 - |  IRQ :                           38 C |
 LED_BLUE :                       2 - | *LED_BLUE_OFF :                 0CC C |
*LED_BLUE_ON :                  0C3 C | *LED_BLUE_TOGGLE :              0D5 C |
 LED_GREEN :                      8 - | *LED_GREEN_OFF :                0B1 C |
*LED_GREEN_ON :                 0A8 C | *LED_GREEN_TOGGLE :             0BA C |
 LED_INIT :                      80 C |  LED_RED :                        4 - |
 LED_RED_OFF :                   96 C |  LED_RED_ON :                    8D C |
*LED_RED_TOGGLE :                9F C | *LISTON :                         1 - |
 LOADSREC :                     262 C | *MACEXP :                         7 - |
*MOMCPU :                        80 - | *MOMCPUNAME :                 "Z80" - |
*NESTMAX :                      100 - |  NEXTCHAR :                     1EF C |
 NMI :                           66 C | *NOCHAR41 :                     107 C |
 NOCHAR44 :                     14A C |  NOTADDR :                      241 C |
 NOTDEC :                       226 C |  NOTGO :                        233 C |
 NOTHEX :                       17E C |  NOTINC :                       21B C |
 NOTWRITE :                     210 C | *PADDING :                        1 - |
 PARSEHEXDIGIT :                16D C | *PIA_ACR :                       0B - |
 PIA_BASE :                       0 - |  PIA_DDRA :                       3 - |
 PIA_DDRB :                       2 - |  PIA_IN :                         0 - |
 PIA_OUT :                      0FF - |  PIA_PCR :                       0C - |
 PIA_PORTA :                      1 - |  PIA_PORTB :                      0 - |
 PROMPT :                       1D3 C |  PUTCHAR :                      108 C |
 PUTCHARPOLL42 :                10B C |  PUTHEX16 :                     19F C |
 PUTHEX8 :                      180 C |  PUTSTR :                       128 C |
 READTOEOL :                    277 C | *RELAXED :                        1 - |
 RESET :                        1B9 C |  S0REC :                        282 C |
 S0TAG :                        322 C |  S1REC :                        2DB C |
 SCHK :                       0EFF2 - |  SCHKOK :                       2FF C |
 SCNT :                       0EFF1 - |  SERR :                         2F9 C |
 SLOOP :                        2BE C |  SREC :                         285 C |
 STYP :                       0EFF0 - |  SVERIFY :                      2EA C |
*TIME :                   "1:34:28" - | *TRUE :                           1 - |
*USERH :                      0EFF6 - |  USERL :                      0EFF5 - |
*VERSION :                     142F - | *_HEXIO_ :                        1 - |
*_UART_ :                         1 - |

    102 symbols
     35 unused symbols

 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 14 - 2/24/2023 1:34:28


  Defined Macros:
  ---------------

LEDOFF                                | LEDON                                
LEDTOGGLE                             |

      3 macros

 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 15 - 2/24/2023 1:34:28


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page
 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 16 - 2/24/2023 1:34:28



  Cross Reference List:
  ---------------------

symbol ADDRH (=0EFF4, monitor.asm:14):
 file monitor.asm :
    159    

symbol ADDRL (=0EFF3, monitor.asm:13):
 file monitor.asm :
     45       56       60       77      100      107      123      125    
    129      131      162      168      189      207    

symbol DECADDR (=25A, monitor.asm:128):
 file monitor.asm :
     92    

symbol DOINC (=215, monitor.asm:85):
 file monitor.asm :
     80    

symbol FT240_FLUSH (=0F6, Y:\software\z80\monitor\../common\uart.asm:39):
 file Y:\software\z80\monitor\../common\uart.asm :
     48    

symbol FT240_INIT (=0DE, Y:\software\z80\monitor\../common\uart.asm:25):
 file monitor.asm :
     40    

symbol FT240_NOSTB (=0E, Y:\software\z80\monitor\../common\uart.asm:19):
 file Y:\software\z80\monitor\../common\uart.asm :
     26       46       92    

symbol FT240_RDSTB (=0C, Y:\software\z80\monitor\../common\uart.asm:20):
 file Y:\software\z80\monitor\../common\uart.asm :
     43       88    

symbol FT240_RXF (=80, Y:\software\z80\monitor\../common\uart.asm:22):
 file Y:\software\z80\monitor\../common\uart.asm :
     36    

symbol FT240_SIWU (=20, Y:\software\z80\monitor\../common\uart.asm:18):
 file Y:\software\z80\monitor\../common\uart.asm :
     30       35    

symbol FT240_TXE (=40, Y:\software\z80\monitor\../common\uart.asm:21):
 file Y:\software\z80\monitor\../common\uart.asm :
     36    

symbol FT240_WRMSK (=1, Y:\software\z80\monitor\../common\uart.asm:17):
 file Y:\software\z80\monitor\../common\uart.asm :
     29       35       64       66    

symbol GETCHAR (=14E, Y:\software\z80\monitor\../common\uart.asm:105):
 file monitor.asm :
     66      136      145    
 file Y:\software\z80\monitor\../common\uart.asm :
    107    
 file Y:\software\z80\monitor\../common\hexio.asm :
     22    
 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 17 - 2/24/2023 1:34:28



symbol GETCHARNB (=133, Y:\software\z80\monitor\../common\uart.asm:83):
 file Y:\software\z80\monitor\../common\uart.asm :
    106    

symbol GETHEXBYTE (=155, Y:\software\z80\monitor\../common\hexio.asm:7):
 file monitor.asm :
    214    

symbol GETHEXBYTESREC (=310, monitor.asm:213):
 file monitor.asm :
    154      157      160      176      194    

symbol GETHEXDIGIT (=16A, Y:\software\z80\monitor\../common\hexio.asm:21):
 file Y:\software\z80\monitor\../common\hexio.asm :
      8       15    

symbol HEXCHARS (=1A9, Y:\software\z80\monitor\../common\hexio.asm:68):
 file Y:\software\z80\monitor\../common\hexio.asm :
     25       44       51    

symbol INCADDR (=252, monitor.asm:122):
 file monitor.asm :
     86      191    

symbol INFOCMD (=1CD, monitor.asm:48):
 file monitor.asm :
     70    

symbol INFOSTR (=327, monitor.asm:229):
 file monitor.asm :
     49    

symbol IRQ (=38, Y:\software\z80\monitor\../common\vec.asm:7):
 file Y:\software\z80\monitor\../common\vec.asm :
      8    

symbol LED_BLUE (=2, Y:\software\z80\monitor\../common\LED.asm:7):
 file Y:\software\z80\monitor\../common\LED.asm :
     41       44    

symbol LED_GREEN (=8, Y:\software\z80\monitor\../common\LED.asm:6):
 file Y:\software\z80\monitor\../common\LED.asm :
     41       44    

symbol LED_INIT (=80, Y:\software\z80\monitor\../common\LED.asm:39):
 file monitor.asm :
     41    

symbol LED_RED (=4, Y:\software\z80\monitor\../common\LED.asm:5):
 file Y:\software\z80\monitor\../common\LED.asm :
     41       44       48       49       50       52       53       54    
     56       57       58    

symbol LED_RED_OFF (=96, Y:\software\z80\monitor\../common\LED.asm:49):
 file monitor.asm :
    150    

symbol LED_RED_ON (=8D, Y:\software\z80\monitor\../common\LED.asm:48):
 file monitor.asm :
 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 18 - 2/24/2023 1:34:28


    201    

symbol LOADSREC (=262, monitor.asm:135):
 file monitor.asm :
     72    

symbol NEXTCHAR (=1EF, monitor.asm:65):
 file monitor.asm :
    120    

symbol NMI (=66, Y:\software\z80\monitor\../common\vec.asm:11):
 file Y:\software\z80\monitor\../common\vec.asm :
     12    

symbol NOCHAR44 (=14A, Y:\software\z80\monitor\../common\uart.asm:98):
 file Y:\software\z80\monitor\../common\uart.asm :
     87    

symbol NOTADDR (=241, monitor.asm:110):
 file monitor.asm :
    105    

symbol NOTDEC (=226, monitor.asm:95):
 file monitor.asm :
     91    

symbol NOTGO (=233, monitor.asm:103):
 file monitor.asm :
     97    

symbol NOTHEX (=17E, Y:\software\z80\monitor\../common\hexio.asm:32):
 file Y:\software\z80\monitor\../common\hexio.asm :
     28    

symbol NOTINC (=21B, monitor.asm:89):
 file monitor.asm :
     84    

symbol NOTWRITE (=210, monitor.asm:82):
 file monitor.asm :
     76    

symbol PARSEHEXDIGIT (=16D, Y:\software\z80\monitor\../common\hexio.asm:23):
 file monitor.asm :
    112    

symbol PIA_BASE (=0, Y:\software\z80\monitor\../common\uart.asm:6):
 file Y:\software\z80\monitor\../common\uart.asm :
      7        8        9       10       11       12    

symbol PIA_DDRA (=3, Y:\software\z80\monitor\../common\uart.asm:10):
 file Y:\software\z80\monitor\../common\uart.asm :
     33       62       69    

symbol PIA_DDRB (=2, Y:\software\z80\monitor\../common\uart.asm:9):
 file Y:\software\z80\monitor\../common\LED.asm :
     43       45    
 file Y:\software\z80\monitor\../common\uart.asm :
     34       37    

 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 19 - 2/24/2023 1:34:28


symbol PIA_IN (=0, Y:\software\z80\monitor\../common\uart.asm:14):
 file Y:\software\z80\monitor\../common\uart.asm :
     32       68    

symbol PIA_OUT (=0FF, Y:\software\z80\monitor\../common\uart.asm:15):
 file Y:\software\z80\monitor\../common\uart.asm :
     61    

symbol PIA_PCR (=0C, Y:\software\z80\monitor\../common\uart.asm:12):
 file Y:\software\z80\monitor\../common\uart.asm :
     27       44       47       89       93    

symbol PIA_PORTA (=1, Y:\software\z80\monitor\../common\uart.asm:8):
 file Y:\software\z80\monitor\../common\uart.asm :
     60       90    

symbol PIA_PORTB (=0, Y:\software\z80\monitor\../common\uart.asm:7):
 file Y:\software\z80\monitor\../common\LED.asm :
     40       42       48( 2)   49( 2)   50( 2)   52( 2)   53( 2)   54( 2)
     56( 2)   57( 2)   58( 2)
 file Y:\software\z80\monitor\../common\uart.asm :
     28       31       40       55       63       65       67       85    

symbol PROMPT (=1D3, monitor.asm:52):
 file monitor.asm :
     74       87       93      108      113      148    

symbol PUTCHAR (=108, Y:\software\z80\monitor\../common\uart.asm:53):
 file monitor.asm :
     55       59       64      171      184    
 file Y:\software\z80\monitor\../common\uart.asm :
     78    
 file Y:\software\z80\monitor\../common\hexio.asm :
     48       55    

symbol PUTCHARPOLL42 (=10B, Y:\software\z80\monitor\../common\uart.asm:56):
 file Y:\software\z80\monitor\../common\uart.asm :
     59    

symbol PUTHEX16 (=19F, Y:\software\z80\monitor\../common\hexio.asm:60):
 file monitor.asm :
     57      169    

symbol PUTHEX8 (=180, Y:\software\z80\monitor\../common\hexio.asm:38):
 file monitor.asm :
     62    
 file Y:\software\z80\monitor\../common\hexio.asm :
     63       66    

symbol PUTSTR (=128, Y:\software\z80\monitor\../common\uart.asm:74):
 file monitor.asm :
     50      167    
 file Y:\software\z80\monitor\../common\uart.asm :
     80    

symbol READTOEOL (=277, monitor.asm:144):
 file monitor.asm :
    147      202      206      210    

symbol RESET (=1B9, monitor.asm:37):
 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 20 - 2/24/2023 1:34:28


 file monitor.asm :
     98    
 file Y:\software\z80\monitor\../common\vec.asm :
      4    

symbol S0REC (=282, monitor.asm:149):
 file monitor.asm :
    139    

symbol S0TAG (=322, monitor.asm:226):
 file monitor.asm :
    166    

symbol S1REC (=2DB, monitor.asm:186):
 file monitor.asm :
    182    

symbol SCHK (=0EFF2, monitor.asm:12):
 file monitor.asm :
    153      196      217    

symbol SCHKOK (=2FF, monitor.asm:203):
 file monitor.asm :
    199    

symbol SCNT (=0EFF1, monitor.asm:11):
 file monitor.asm :
    156      173      220    

symbol SERR (=2F9, monitor.asm:200):
 file monitor.asm :
    155      158      161      177      195    

symbol SLOOP (=2BE, monitor.asm:172):
 file monitor.asm :
    165      185      188      192    

symbol SREC (=285, monitor.asm:151):
 file monitor.asm :
    141      143    

symbol STYP (=0EFF0, monitor.asm:10):
 file monitor.asm :
    137      163      180      204    

symbol SVERIFY (=2EA, monitor.asm:193):
 file monitor.asm :
    175    

symbol USERL (=0EFF5, monitor.asm:15):
 file monitor.asm :
     46       78      106      116    

symbol _HEXIO_ (=1, Y:\software\z80\monitor\../common\hexio.asm:3):
 file Y:\software\z80\monitor\../common\hexio.asm :
      2    

symbol _UART_ (=1, Y:\software\z80\monitor\../common\uart.asm:2):
 file Y:\software\z80\monitor\../common\uart.asm :
      1( 2)
 AS V1.42 Beta [Bld 223] - Source File monitor.asm - Page 21 - 2/24/2023 1:34:28





0.02 seconds assembly time

    602 lines source file
    665 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
